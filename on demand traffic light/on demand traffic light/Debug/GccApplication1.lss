
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d34  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000da8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  00000da8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000da8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000dd8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001542  00000000  00000000  00000f24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000826  00000000  00000000  00002466  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000af9  00000000  00000000  00002c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000200  00000000  00000000  00003788  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000491  00000000  00000000  00003988  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ac5  00000000  00000000  00003e19  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000048de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 b9 02 	call	0x572	; 0x572 <main>
  74:	0c 94 98 06 	jmp	0xd30	; 0xd30 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <APP_init>:
 */ 
#include "app.h"
int PORT_PIN =0;
void APP_init(void){
		//LED init
		LED_init(PORT_A,0);
  7c:	60 e0       	ldi	r22, 0x00	; 0
  7e:	81 e4       	ldi	r24, 0x41	; 65
  80:	0e 94 1c 02 	call	0x438	; 0x438 <LED_init>
		LED_init(PORT_A,1);
  84:	61 e0       	ldi	r22, 0x01	; 1
  86:	81 e4       	ldi	r24, 0x41	; 65
  88:	0e 94 1c 02 	call	0x438	; 0x438 <LED_init>
		LED_init(PORT_A,2);
  8c:	62 e0       	ldi	r22, 0x02	; 2
  8e:	81 e4       	ldi	r24, 0x41	; 65
  90:	0e 94 1c 02 	call	0x438	; 0x438 <LED_init>
		LED_init(PORT_B,0);
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	82 e4       	ldi	r24, 0x42	; 66
  98:	0e 94 1c 02 	call	0x438	; 0x438 <LED_init>
		LED_init(PORT_B,1);
  9c:	61 e0       	ldi	r22, 0x01	; 1
  9e:	82 e4       	ldi	r24, 0x42	; 66
  a0:	0e 94 1c 02 	call	0x438	; 0x438 <LED_init>
		LED_init(PORT_B,2);
  a4:	62 e0       	ldi	r22, 0x02	; 2
  a6:	82 e4       	ldi	r24, 0x42	; 66
  a8:	0e 94 1c 02 	call	0x438	; 0x438 <LED_init>
		//button init
		Button_init(PORT_D,2);
  ac:	62 e0       	ldi	r22, 0x02	; 2
  ae:	84 e4       	ldi	r24, 0x44	; 68
  b0:	0e 94 0f 02 	call	0x41e	; 0x41e <Button_init>
		//timer init
		TIMER_init();
  b4:	0e 94 37 02 	call	0x46e	; 0x46e <TIMER_init>
		//global interrupt and rising edge
		sei();
  b8:	78 94       	sei
		RISING_EDGE();
  ba:	85 b7       	in	r24, 0x35	; 53
  bc:	83 60       	ori	r24, 0x03	; 3
  be:	85 bf       	out	0x35, r24	; 53
		INT0();
  c0:	8b b7       	in	r24, 0x3b	; 59
  c2:	80 64       	ori	r24, 0x40	; 64
  c4:	8b bf       	out	0x3b, r24	; 59
  c6:	08 95       	ret

000000c8 <APP_start>:
}
void APP_start(void){
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
	Button_read(PORT_D,2,&ButtonState);
  cc:	42 e6       	ldi	r20, 0x62	; 98
  ce:	50 e0       	ldi	r21, 0x00	; 0
  d0:	62 e0       	ldi	r22, 0x02	; 2
  d2:	84 e4       	ldi	r24, 0x44	; 68
  d4:	0e 94 16 02 	call	0x42c	; 0x42c <Button_read>
	LED_ON(PORT_A,0);
  d8:	60 e0       	ldi	r22, 0x00	; 0
  da:	81 e4       	ldi	r24, 0x41	; 65
  dc:	0e 94 23 02 	call	0x446	; 0x446 <LED_ON>
	PORT_PIN = 1;
  e0:	c1 e0       	ldi	r28, 0x01	; 1
  e2:	d0 e0       	ldi	r29, 0x00	; 0
  e4:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  e8:	c0 93 60 00 	sts	0x0060, r28	; 0x800060 <__DATA_REGION_ORIGIN__>
	_delay(5000);
  ec:	88 e8       	ldi	r24, 0x88	; 136
  ee:	93 e1       	ldi	r25, 0x13	; 19
  f0:	0e 94 39 02 	call	0x472	; 0x472 <_delay>
	LED_OFF(PORT_A,0);
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	81 e4       	ldi	r24, 0x41	; 65
  f8:	0e 94 2a 02 	call	0x454	; 0x454 <LED_OFF>
	LED_toggle(PORT_A,1);
  fc:	61 e0       	ldi	r22, 0x01	; 1
  fe:	81 e4       	ldi	r24, 0x41	; 65
 100:	0e 94 31 02 	call	0x462	; 0x462 <LED_toggle>
	PORT_PIN = 1;
 104:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 108:	c0 93 60 00 	sts	0x0060, r28	; 0x800060 <__DATA_REGION_ORIGIN__>
	_delay(1000);
 10c:	88 ee       	ldi	r24, 0xE8	; 232
 10e:	93 e0       	ldi	r25, 0x03	; 3
 110:	0e 94 39 02 	call	0x472	; 0x472 <_delay>
	LED_toggle(PORT_A,1);
 114:	61 e0       	ldi	r22, 0x01	; 1
 116:	81 e4       	ldi	r24, 0x41	; 65
 118:	0e 94 31 02 	call	0x462	; 0x462 <LED_toggle>
	_delay(1000);
 11c:	88 ee       	ldi	r24, 0xE8	; 232
 11e:	93 e0       	ldi	r25, 0x03	; 3
 120:	0e 94 39 02 	call	0x472	; 0x472 <_delay>
	LED_toggle(PORT_A,1);
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	81 e4       	ldi	r24, 0x41	; 65
 128:	0e 94 31 02 	call	0x462	; 0x462 <LED_toggle>
	_delay(1000);
 12c:	88 ee       	ldi	r24, 0xE8	; 232
 12e:	93 e0       	ldi	r25, 0x03	; 3
 130:	0e 94 39 02 	call	0x472	; 0x472 <_delay>
	LED_toggle(PORT_A,1);
 134:	61 e0       	ldi	r22, 0x01	; 1
 136:	81 e4       	ldi	r24, 0x41	; 65
 138:	0e 94 31 02 	call	0x462	; 0x462 <LED_toggle>
	_delay(1000);
 13c:	88 ee       	ldi	r24, 0xE8	; 232
 13e:	93 e0       	ldi	r25, 0x03	; 3
 140:	0e 94 39 02 	call	0x472	; 0x472 <_delay>
	LED_toggle(PORT_A,1);
 144:	61 e0       	ldi	r22, 0x01	; 1
 146:	81 e4       	ldi	r24, 0x41	; 65
 148:	0e 94 31 02 	call	0x462	; 0x462 <LED_toggle>
	_delay(1000);
 14c:	88 ee       	ldi	r24, 0xE8	; 232
 14e:	93 e0       	ldi	r25, 0x03	; 3
 150:	0e 94 39 02 	call	0x472	; 0x472 <_delay>
	LED_OFF(PORT_A,1);
 154:	61 e0       	ldi	r22, 0x01	; 1
 156:	81 e4       	ldi	r24, 0x41	; 65
 158:	0e 94 2a 02 	call	0x454	; 0x454 <LED_OFF>
	LED_ON(PORT_A,2);
 15c:	62 e0       	ldi	r22, 0x02	; 2
 15e:	81 e4       	ldi	r24, 0x41	; 65
 160:	0e 94 23 02 	call	0x446	; 0x446 <LED_ON>
	PORT_PIN = 2;
 164:	82 e0       	ldi	r24, 0x02	; 2
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 16c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	_delay(5000);
 170:	88 e8       	ldi	r24, 0x88	; 136
 172:	93 e1       	ldi	r25, 0x13	; 19
 174:	0e 94 39 02 	call	0x472	; 0x472 <_delay>
	LED_OFF(PORT_A,2);
 178:	62 e0       	ldi	r22, 0x02	; 2
 17a:	81 e4       	ldi	r24, 0x41	; 65
 17c:	0e 94 2a 02 	call	0x454	; 0x454 <LED_OFF>
	LED_toggle(PORT_A,1);
 180:	61 e0       	ldi	r22, 0x01	; 1
 182:	81 e4       	ldi	r24, 0x41	; 65
 184:	0e 94 31 02 	call	0x462	; 0x462 <LED_toggle>
	PORT_PIN = 1;
 188:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 18c:	c0 93 60 00 	sts	0x0060, r28	; 0x800060 <__DATA_REGION_ORIGIN__>
	_delay(1000);
 190:	88 ee       	ldi	r24, 0xE8	; 232
 192:	93 e0       	ldi	r25, 0x03	; 3
 194:	0e 94 39 02 	call	0x472	; 0x472 <_delay>
	LED_toggle(PORT_A,1);
 198:	61 e0       	ldi	r22, 0x01	; 1
 19a:	81 e4       	ldi	r24, 0x41	; 65
 19c:	0e 94 31 02 	call	0x462	; 0x462 <LED_toggle>
	_delay(1000);
 1a0:	88 ee       	ldi	r24, 0xE8	; 232
 1a2:	93 e0       	ldi	r25, 0x03	; 3
 1a4:	0e 94 39 02 	call	0x472	; 0x472 <_delay>
	LED_toggle(PORT_A,1);
 1a8:	61 e0       	ldi	r22, 0x01	; 1
 1aa:	81 e4       	ldi	r24, 0x41	; 65
 1ac:	0e 94 31 02 	call	0x462	; 0x462 <LED_toggle>
	_delay(1000);
 1b0:	88 ee       	ldi	r24, 0xE8	; 232
 1b2:	93 e0       	ldi	r25, 0x03	; 3
 1b4:	0e 94 39 02 	call	0x472	; 0x472 <_delay>
	LED_toggle(PORT_A,1);
 1b8:	61 e0       	ldi	r22, 0x01	; 1
 1ba:	81 e4       	ldi	r24, 0x41	; 65
 1bc:	0e 94 31 02 	call	0x462	; 0x462 <LED_toggle>
	_delay(1000);
 1c0:	88 ee       	ldi	r24, 0xE8	; 232
 1c2:	93 e0       	ldi	r25, 0x03	; 3
 1c4:	0e 94 39 02 	call	0x472	; 0x472 <_delay>
	LED_toggle(PORT_A,1);
 1c8:	61 e0       	ldi	r22, 0x01	; 1
 1ca:	81 e4       	ldi	r24, 0x41	; 65
 1cc:	0e 94 31 02 	call	0x462	; 0x462 <LED_toggle>
	_delay(1000);
 1d0:	88 ee       	ldi	r24, 0xE8	; 232
 1d2:	93 e0       	ldi	r25, 0x03	; 3
 1d4:	0e 94 39 02 	call	0x472	; 0x472 <_delay>
	LED_OFF(PORT_A,1);
 1d8:	61 e0       	ldi	r22, 0x01	; 1
 1da:	81 e4       	ldi	r24, 0x41	; 65
 1dc:	0e 94 2a 02 	call	0x454	; 0x454 <LED_OFF>
}
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	08 95       	ret

000001e6 <__vector_1>:
ISR(EXT_INT_0){
 1e6:	1f 92       	push	r1
 1e8:	0f 92       	push	r0
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	0f 92       	push	r0
 1ee:	11 24       	eor	r1, r1
 1f0:	2f 93       	push	r18
 1f2:	3f 93       	push	r19
 1f4:	4f 93       	push	r20
 1f6:	5f 93       	push	r21
 1f8:	6f 93       	push	r22
 1fa:	7f 93       	push	r23
 1fc:	8f 93       	push	r24
 1fe:	9f 93       	push	r25
 200:	af 93       	push	r26
 202:	bf 93       	push	r27
 204:	ef 93       	push	r30
 206:	ff 93       	push	r31
	Button_read(PORT_D,2,&ButtonState);
 208:	42 e6       	ldi	r20, 0x62	; 98
 20a:	50 e0       	ldi	r21, 0x00	; 0
 20c:	62 e0       	ldi	r22, 0x02	; 2
 20e:	84 e4       	ldi	r24, 0x44	; 68
 210:	0e 94 16 02 	call	0x42c	; 0x42c <Button_read>
	if (ButtonState == HIGh)
 214:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <ButtonState>
 218:	81 30       	cpi	r24, 0x01	; 1
 21a:	09 f0       	breq	.+2      	; 0x21e <__vector_1+0x38>
 21c:	ef c0       	rjmp	.+478    	; 0x3fc <__vector_1+0x216>
	{
		_delay(5000);
 21e:	88 e8       	ldi	r24, 0x88	; 136
 220:	93 e1       	ldi	r25, 0x13	; 19
 222:	0e 94 39 02 	call	0x472	; 0x472 <_delay>
		Button_read(PORT_D,2,&ButtonState);
 226:	42 e6       	ldi	r20, 0x62	; 98
 228:	50 e0       	ldi	r21, 0x00	; 0
 22a:	62 e0       	ldi	r22, 0x02	; 2
 22c:	84 e4       	ldi	r24, 0x44	; 68
 22e:	0e 94 16 02 	call	0x42c	; 0x42c <Button_read>
		if (ButtonState != HIGh){
 232:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <ButtonState>
 236:	81 30       	cpi	r24, 0x01	; 1
 238:	09 f4       	brne	.+2      	; 0x23c <__vector_1+0x56>
 23a:	e0 c0       	rjmp	.+448    	; 0x3fc <__vector_1+0x216>
			switch(PORT_PIN){
 23c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 240:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 244:	81 30       	cpi	r24, 0x01	; 1
 246:	91 05       	cpc	r25, r1
 248:	21 f0       	breq	.+8      	; 0x252 <__vector_1+0x6c>
 24a:	02 97       	sbiw	r24, 0x02	; 2
 24c:	09 f4       	brne	.+2      	; 0x250 <__vector_1+0x6a>
 24e:	5e c0       	rjmp	.+188    	; 0x30c <__vector_1+0x126>
 250:	71 c0       	rjmp	.+226    	; 0x334 <__vector_1+0x14e>
				case 1 :
				LED_OFF(PORT_A,0);
 252:	60 e0       	ldi	r22, 0x00	; 0
 254:	81 e4       	ldi	r24, 0x41	; 65
 256:	0e 94 2a 02 	call	0x454	; 0x454 <LED_OFF>
				LED_ON(PORT_B,2);
 25a:	62 e0       	ldi	r22, 0x02	; 2
 25c:	82 e4       	ldi	r24, 0x42	; 66
 25e:	0e 94 23 02 	call	0x446	; 0x446 <LED_ON>
				_delay(5000);
 262:	88 e8       	ldi	r24, 0x88	; 136
 264:	93 e1       	ldi	r25, 0x13	; 19
 266:	0e 94 39 02 	call	0x472	; 0x472 <_delay>
				LED_OFF(PORT_B,2);
 26a:	62 e0       	ldi	r22, 0x02	; 2
 26c:	82 e4       	ldi	r24, 0x42	; 66
 26e:	0e 94 2a 02 	call	0x454	; 0x454 <LED_OFF>
				LED_toggle(PORT_A,1);
 272:	61 e0       	ldi	r22, 0x01	; 1
 274:	81 e4       	ldi	r24, 0x41	; 65
 276:	0e 94 31 02 	call	0x462	; 0x462 <LED_toggle>
				LED_toggle(PORT_B,1);
 27a:	61 e0       	ldi	r22, 0x01	; 1
 27c:	82 e4       	ldi	r24, 0x42	; 66
 27e:	0e 94 31 02 	call	0x462	; 0x462 <LED_toggle>
				_delay(1000);
 282:	88 ee       	ldi	r24, 0xE8	; 232
 284:	93 e0       	ldi	r25, 0x03	; 3
 286:	0e 94 39 02 	call	0x472	; 0x472 <_delay>
				LED_toggle(PORT_A,1);
 28a:	61 e0       	ldi	r22, 0x01	; 1
 28c:	81 e4       	ldi	r24, 0x41	; 65
 28e:	0e 94 31 02 	call	0x462	; 0x462 <LED_toggle>
				LED_toggle(PORT_B,1);
 292:	61 e0       	ldi	r22, 0x01	; 1
 294:	82 e4       	ldi	r24, 0x42	; 66
 296:	0e 94 31 02 	call	0x462	; 0x462 <LED_toggle>
				_delay(1000);
 29a:	88 ee       	ldi	r24, 0xE8	; 232
 29c:	93 e0       	ldi	r25, 0x03	; 3
 29e:	0e 94 39 02 	call	0x472	; 0x472 <_delay>
				LED_toggle(PORT_A,1);
 2a2:	61 e0       	ldi	r22, 0x01	; 1
 2a4:	81 e4       	ldi	r24, 0x41	; 65
 2a6:	0e 94 31 02 	call	0x462	; 0x462 <LED_toggle>
				LED_toggle(PORT_B,1);
 2aa:	61 e0       	ldi	r22, 0x01	; 1
 2ac:	82 e4       	ldi	r24, 0x42	; 66
 2ae:	0e 94 31 02 	call	0x462	; 0x462 <LED_toggle>
				_delay(1000);
 2b2:	88 ee       	ldi	r24, 0xE8	; 232
 2b4:	93 e0       	ldi	r25, 0x03	; 3
 2b6:	0e 94 39 02 	call	0x472	; 0x472 <_delay>
				LED_toggle(PORT_A,1);
 2ba:	61 e0       	ldi	r22, 0x01	; 1
 2bc:	81 e4       	ldi	r24, 0x41	; 65
 2be:	0e 94 31 02 	call	0x462	; 0x462 <LED_toggle>
				LED_toggle(PORT_B,1);
 2c2:	61 e0       	ldi	r22, 0x01	; 1
 2c4:	82 e4       	ldi	r24, 0x42	; 66
 2c6:	0e 94 31 02 	call	0x462	; 0x462 <LED_toggle>
				_delay(1000);
 2ca:	88 ee       	ldi	r24, 0xE8	; 232
 2cc:	93 e0       	ldi	r25, 0x03	; 3
 2ce:	0e 94 39 02 	call	0x472	; 0x472 <_delay>
				LED_OFF(PORT_A,1);
 2d2:	61 e0       	ldi	r22, 0x01	; 1
 2d4:	81 e4       	ldi	r24, 0x41	; 65
 2d6:	0e 94 2a 02 	call	0x454	; 0x454 <LED_OFF>
				LED_OFF(PORT_B,1);
 2da:	61 e0       	ldi	r22, 0x01	; 1
 2dc:	82 e4       	ldi	r24, 0x42	; 66
 2de:	0e 94 2a 02 	call	0x454	; 0x454 <LED_OFF>
				LED_ON(PORT_B,0);
 2e2:	60 e0       	ldi	r22, 0x00	; 0
 2e4:	82 e4       	ldi	r24, 0x42	; 66
 2e6:	0e 94 23 02 	call	0x446	; 0x446 <LED_ON>
				LED_ON(PORT_A,2);
 2ea:	62 e0       	ldi	r22, 0x02	; 2
 2ec:	81 e4       	ldi	r24, 0x41	; 65
 2ee:	0e 94 23 02 	call	0x446	; 0x446 <LED_ON>
				_delay(5000);
 2f2:	88 e8       	ldi	r24, 0x88	; 136
 2f4:	93 e1       	ldi	r25, 0x13	; 19
 2f6:	0e 94 39 02 	call	0x472	; 0x472 <_delay>
				LED_OFF(PORT_A,2);
 2fa:	62 e0       	ldi	r22, 0x02	; 2
 2fc:	81 e4       	ldi	r24, 0x41	; 65
 2fe:	0e 94 2a 02 	call	0x454	; 0x454 <LED_OFF>
				LED_OFF(PORT_B,0);
 302:	60 e0       	ldi	r22, 0x00	; 0
 304:	82 e4       	ldi	r24, 0x42	; 66
 306:	0e 94 2a 02 	call	0x454	; 0x454 <LED_OFF>
				break;
 30a:	14 c0       	rjmp	.+40     	; 0x334 <__vector_1+0x14e>
				case  2 :
				LED_ON(PORT_A,2);
 30c:	62 e0       	ldi	r22, 0x02	; 2
 30e:	81 e4       	ldi	r24, 0x41	; 65
 310:	0e 94 23 02 	call	0x446	; 0x446 <LED_ON>
				LED_ON(PORT_B,0);
 314:	60 e0       	ldi	r22, 0x00	; 0
 316:	82 e4       	ldi	r24, 0x42	; 66
 318:	0e 94 23 02 	call	0x446	; 0x446 <LED_ON>
				_delay(5000);
 31c:	88 e8       	ldi	r24, 0x88	; 136
 31e:	93 e1       	ldi	r25, 0x13	; 19
 320:	0e 94 39 02 	call	0x472	; 0x472 <_delay>
				LED_OFF(PORT_A,2);
 324:	62 e0       	ldi	r22, 0x02	; 2
 326:	81 e4       	ldi	r24, 0x41	; 65
 328:	0e 94 2a 02 	call	0x454	; 0x454 <LED_OFF>
				LED_OFF(PORT_B,0);
 32c:	60 e0       	ldi	r22, 0x00	; 0
 32e:	82 e4       	ldi	r24, 0x42	; 66
 330:	0e 94 2a 02 	call	0x454	; 0x454 <LED_OFF>
				break;
			}
			LED_OFF(PORT_A,2);
 334:	62 e0       	ldi	r22, 0x02	; 2
 336:	81 e4       	ldi	r24, 0x41	; 65
 338:	0e 94 2a 02 	call	0x454	; 0x454 <LED_OFF>
			LED_toggle(PORT_A,1);
 33c:	61 e0       	ldi	r22, 0x01	; 1
 33e:	81 e4       	ldi	r24, 0x41	; 65
 340:	0e 94 31 02 	call	0x462	; 0x462 <LED_toggle>
			LED_toggle(PORT_B,1);
 344:	61 e0       	ldi	r22, 0x01	; 1
 346:	82 e4       	ldi	r24, 0x42	; 66
 348:	0e 94 31 02 	call	0x462	; 0x462 <LED_toggle>
			_delay(1000);
 34c:	88 ee       	ldi	r24, 0xE8	; 232
 34e:	93 e0       	ldi	r25, 0x03	; 3
 350:	0e 94 39 02 	call	0x472	; 0x472 <_delay>
			LED_toggle(PORT_A,1);
 354:	61 e0       	ldi	r22, 0x01	; 1
 356:	81 e4       	ldi	r24, 0x41	; 65
 358:	0e 94 31 02 	call	0x462	; 0x462 <LED_toggle>
			LED_toggle(PORT_B,1);
 35c:	61 e0       	ldi	r22, 0x01	; 1
 35e:	82 e4       	ldi	r24, 0x42	; 66
 360:	0e 94 31 02 	call	0x462	; 0x462 <LED_toggle>
			_delay(1000);
 364:	88 ee       	ldi	r24, 0xE8	; 232
 366:	93 e0       	ldi	r25, 0x03	; 3
 368:	0e 94 39 02 	call	0x472	; 0x472 <_delay>
			LED_toggle(PORT_A,1);
 36c:	61 e0       	ldi	r22, 0x01	; 1
 36e:	81 e4       	ldi	r24, 0x41	; 65
 370:	0e 94 31 02 	call	0x462	; 0x462 <LED_toggle>
			LED_toggle(PORT_B,1);
 374:	61 e0       	ldi	r22, 0x01	; 1
 376:	82 e4       	ldi	r24, 0x42	; 66
 378:	0e 94 31 02 	call	0x462	; 0x462 <LED_toggle>
			_delay(1000);
 37c:	88 ee       	ldi	r24, 0xE8	; 232
 37e:	93 e0       	ldi	r25, 0x03	; 3
 380:	0e 94 39 02 	call	0x472	; 0x472 <_delay>
			LED_toggle(PORT_A,1);
 384:	61 e0       	ldi	r22, 0x01	; 1
 386:	81 e4       	ldi	r24, 0x41	; 65
 388:	0e 94 31 02 	call	0x462	; 0x462 <LED_toggle>
			LED_toggle(PORT_B,1);
 38c:	61 e0       	ldi	r22, 0x01	; 1
 38e:	82 e4       	ldi	r24, 0x42	; 66
 390:	0e 94 31 02 	call	0x462	; 0x462 <LED_toggle>
			_delay(1000);
 394:	88 ee       	ldi	r24, 0xE8	; 232
 396:	93 e0       	ldi	r25, 0x03	; 3
 398:	0e 94 39 02 	call	0x472	; 0x472 <_delay>
			LED_OFF(PORT_A,1);
 39c:	61 e0       	ldi	r22, 0x01	; 1
 39e:	81 e4       	ldi	r24, 0x41	; 65
 3a0:	0e 94 2a 02 	call	0x454	; 0x454 <LED_OFF>
			LED_OFF(PORT_B,1);
 3a4:	61 e0       	ldi	r22, 0x01	; 1
 3a6:	82 e4       	ldi	r24, 0x42	; 66
 3a8:	0e 94 2a 02 	call	0x454	; 0x454 <LED_OFF>
			LED_ON(PORT_B,0);
 3ac:	60 e0       	ldi	r22, 0x00	; 0
 3ae:	82 e4       	ldi	r24, 0x42	; 66
 3b0:	0e 94 23 02 	call	0x446	; 0x446 <LED_ON>
			LED_ON(PORT_A,2);
 3b4:	62 e0       	ldi	r22, 0x02	; 2
 3b6:	81 e4       	ldi	r24, 0x41	; 65
 3b8:	0e 94 23 02 	call	0x446	; 0x446 <LED_ON>
			_delay(5000);
 3bc:	88 e8       	ldi	r24, 0x88	; 136
 3be:	93 e1       	ldi	r25, 0x13	; 19
 3c0:	0e 94 39 02 	call	0x472	; 0x472 <_delay>
			LED_OFF(PORT_A,2);
 3c4:	62 e0       	ldi	r22, 0x02	; 2
 3c6:	81 e4       	ldi	r24, 0x41	; 65
 3c8:	0e 94 2a 02 	call	0x454	; 0x454 <LED_OFF>
			LED_OFF(PORT_B,0);
 3cc:	60 e0       	ldi	r22, 0x00	; 0
 3ce:	82 e4       	ldi	r24, 0x42	; 66
 3d0:	0e 94 2a 02 	call	0x454	; 0x454 <LED_OFF>
			LED_ON(PORT_A,0);
 3d4:	60 e0       	ldi	r22, 0x00	; 0
 3d6:	81 e4       	ldi	r24, 0x41	; 65
 3d8:	0e 94 23 02 	call	0x446	; 0x446 <LED_ON>
			LED_ON(PORT_B,2);
 3dc:	62 e0       	ldi	r22, 0x02	; 2
 3de:	82 e4       	ldi	r24, 0x42	; 66
 3e0:	0e 94 23 02 	call	0x446	; 0x446 <LED_ON>
			_delay(5000);
 3e4:	88 e8       	ldi	r24, 0x88	; 136
 3e6:	93 e1       	ldi	r25, 0x13	; 19
 3e8:	0e 94 39 02 	call	0x472	; 0x472 <_delay>
			LED_OFF(PORT_A,0);
 3ec:	60 e0       	ldi	r22, 0x00	; 0
 3ee:	81 e4       	ldi	r24, 0x41	; 65
 3f0:	0e 94 2a 02 	call	0x454	; 0x454 <LED_OFF>
			LED_OFF(PORT_B,2);
 3f4:	62 e0       	ldi	r22, 0x02	; 2
 3f6:	82 e4       	ldi	r24, 0x42	; 66
 3f8:	0e 94 2a 02 	call	0x454	; 0x454 <LED_OFF>
		}
	}
 3fc:	ff 91       	pop	r31
 3fe:	ef 91       	pop	r30
 400:	bf 91       	pop	r27
 402:	af 91       	pop	r26
 404:	9f 91       	pop	r25
 406:	8f 91       	pop	r24
 408:	7f 91       	pop	r23
 40a:	6f 91       	pop	r22
 40c:	5f 91       	pop	r21
 40e:	4f 91       	pop	r20
 410:	3f 91       	pop	r19
 412:	2f 91       	pop	r18
 414:	0f 90       	pop	r0
 416:	0f be       	out	0x3f, r0	; 63
 418:	0f 90       	pop	r0
 41a:	1f 90       	pop	r1
 41c:	18 95       	reti

0000041e <Button_init>:
 * Created: 9/9/2022 5:59:41 PM
 *  Author: Abdallah
 */ 
#include "BUTTON.h"

void Button_init(uint8_t buttonPort, uint8_t buttonPin){
 41e:	98 2f       	mov	r25, r24
 420:	86 2f       	mov	r24, r22
	DIO_init(buttonPin,buttonPort,IN);
 422:	40 e0       	ldi	r20, 0x00	; 0
 424:	69 2f       	mov	r22, r25
 426:	0e 94 be 02 	call	0x57c	; 0x57c <DIO_init>
 42a:	08 95       	ret

0000042c <Button_read>:
}

void Button_read(uint8_t buttonPort, uint8_t buttonPin,uint8_t *Value){
 42c:	98 2f       	mov	r25, r24
 42e:	86 2f       	mov	r24, r22
	DIO_Read(buttonPin,buttonPort, Value);
 430:	69 2f       	mov	r22, r25
 432:	0e 94 13 04 	call	0x826	; 0x826 <DIO_Read>
 436:	08 95       	ret

00000438 <LED_init>:
 * Created: 9/9/2022 5:59:13 PM
 *  Author: Abdallah
 */ 
#include "LED.h"

void LED_init(uint8_t LED_PORT, uint8_t LED_PIN){
 438:	98 2f       	mov	r25, r24
 43a:	86 2f       	mov	r24, r22
	
	DIO_init(LED_PIN,LED_PORT,OUT);
 43c:	41 e0       	ldi	r20, 0x01	; 1
 43e:	69 2f       	mov	r22, r25
 440:	0e 94 be 02 	call	0x57c	; 0x57c <DIO_init>
 444:	08 95       	ret

00000446 <LED_ON>:
	
}

void LED_ON(uint8_t LED_PORT, uint8_t LED_PIN){
 446:	98 2f       	mov	r25, r24
 448:	86 2f       	mov	r24, r22
	DIO_Write(LED_PIN,LED_PORT,HIGh);
 44a:	41 e0       	ldi	r20, 0x01	; 1
 44c:	69 2f       	mov	r22, r25
 44e:	0e 94 49 03 	call	0x692	; 0x692 <DIO_Write>
 452:	08 95       	ret

00000454 <LED_OFF>:
}
void LED_OFF(uint8_t LED_PORT, uint8_t LED_PIN){
 454:	98 2f       	mov	r25, r24
 456:	86 2f       	mov	r24, r22
	DIO_Write(LED_PIN,LED_PORT,LOW);
 458:	40 e0       	ldi	r20, 0x00	; 0
 45a:	69 2f       	mov	r22, r25
 45c:	0e 94 49 03 	call	0x692	; 0x692 <DIO_Write>
 460:	08 95       	ret

00000462 <LED_toggle>:
}
void LED_toggle(uint8_t LED_PORT, uint8_t LED_PIN){
 462:	98 2f       	mov	r25, r24
 464:	86 2f       	mov	r24, r22
	DIO_toggle(LED_PIN,LED_PORT);
 466:	69 2f       	mov	r22, r25
 468:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <DIO_toggle>
 46c:	08 95       	ret

0000046e <TIMER_init>:
 *  Author: Abdallah
 */ 
#include "timer.h"

void TIMER_init(){
	TCCR0 = 0x00; 
 46e:	13 be       	out	0x33, r1	; 51
 470:	08 95       	ret

00000472 <_delay>:
}
void _delay(uint16_t ms){
 472:	8f 92       	push	r8
 474:	9f 92       	push	r9
 476:	af 92       	push	r10
 478:	bf 92       	push	r11
 47a:	cf 92       	push	r12
 47c:	df 92       	push	r13
 47e:	ef 92       	push	r14
 480:	ff 92       	push	r15
 482:	cf 93       	push	r28
 484:	df 93       	push	r29
 486:	ec 01       	movw	r28, r24
	uint16_t numper_of_OverFlow,TimerInitial;
	double MaxDelay,tick;
	uint32_t Over_Flow_count=0;
	tick = 256.0/1000.0; 
	MaxDelay= 65.536; 
	if(ms<MaxDelay)
 488:	bc 01       	movw	r22, r24
 48a:	80 e0       	ldi	r24, 0x00	; 0
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__floatunsisf>
 492:	6b 01       	movw	r12, r22
 494:	7c 01       	movw	r14, r24
 496:	2f e6       	ldi	r18, 0x6F	; 111
 498:	32 e1       	ldi	r19, 0x12	; 18
 49a:	43 e8       	ldi	r20, 0x83	; 131
 49c:	52 e4       	ldi	r21, 0x42	; 66
 49e:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__cmpsf2>
 4a2:	88 23       	and	r24, r24
 4a4:	9c f4       	brge	.+38     	; 0x4cc <_delay+0x5a>
	{
		TimerInitial = (MaxDelay-ms)/tick;
 4a6:	a7 01       	movw	r20, r14
 4a8:	96 01       	movw	r18, r12
 4aa:	6f e6       	ldi	r22, 0x6F	; 111
 4ac:	72 e1       	ldi	r23, 0x12	; 18
 4ae:	83 e8       	ldi	r24, 0x83	; 131
 4b0:	92 e4       	ldi	r25, 0x42	; 66
 4b2:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__subsf3>
 4b6:	2f e6       	ldi	r18, 0x6F	; 111
 4b8:	32 e1       	ldi	r19, 0x12	; 18
 4ba:	43 e8       	ldi	r20, 0x83	; 131
 4bc:	5e e3       	ldi	r21, 0x3E	; 62
 4be:	0e 94 04 05 	call	0xa08	; 0xa08 <__divsf3>
 4c2:	0e 94 76 05 	call	0xaec	; 0xaec <__fixunssfsi>
		numper_of_OverFlow = 1;
 4c6:	c1 e0       	ldi	r28, 0x01	; 1
 4c8:	d0 e0       	ldi	r29, 0x00	; 0
 4ca:	35 c0       	rjmp	.+106    	; 0x536 <_delay+0xc4>
		
		}
		else if(ms == (int)MaxDelay)
 4cc:	c1 34       	cpi	r28, 0x41	; 65
 4ce:	d1 05       	cpc	r29, r1
 4d0:	79 f1       	breq	.+94     	; 0x530 <_delay+0xbe>
		TimerInitial=0;
		numper_of_OverFlow=1;
		}
		else
		{
		numper_of_OverFlow = ceil((double)ms/MaxDelay);
 4d2:	2f e6       	ldi	r18, 0x6F	; 111
 4d4:	32 e1       	ldi	r19, 0x12	; 18
 4d6:	43 e8       	ldi	r20, 0x83	; 131
 4d8:	52 e4       	ldi	r21, 0x42	; 66
 4da:	c7 01       	movw	r24, r14
 4dc:	b6 01       	movw	r22, r12
 4de:	0e 94 04 05 	call	0xa08	; 0xa08 <__divsf3>
 4e2:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <ceil>
 4e6:	0e 94 76 05 	call	0xaec	; 0xaec <__fixunssfsi>
 4ea:	4b 01       	movw	r8, r22
 4ec:	5c 01       	movw	r10, r24
 4ee:	eb 01       	movw	r28, r22
		TimerInitial = (1<<8) - ((double)ms/tick)/numper_of_OverFlow;
 4f0:	2f e6       	ldi	r18, 0x6F	; 111
 4f2:	32 e1       	ldi	r19, 0x12	; 18
 4f4:	43 e8       	ldi	r20, 0x83	; 131
 4f6:	5e e3       	ldi	r21, 0x3E	; 62
 4f8:	c7 01       	movw	r24, r14
 4fa:	b6 01       	movw	r22, r12
 4fc:	0e 94 04 05 	call	0xa08	; 0xa08 <__divsf3>
 500:	6b 01       	movw	r12, r22
 502:	7c 01       	movw	r14, r24
 504:	b4 01       	movw	r22, r8
 506:	80 e0       	ldi	r24, 0x00	; 0
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__floatunsisf>
 50e:	9b 01       	movw	r18, r22
 510:	ac 01       	movw	r20, r24
 512:	c7 01       	movw	r24, r14
 514:	b6 01       	movw	r22, r12
 516:	0e 94 04 05 	call	0xa08	; 0xa08 <__divsf3>
 51a:	9b 01       	movw	r18, r22
 51c:	ac 01       	movw	r20, r24
 51e:	60 e0       	ldi	r22, 0x00	; 0
 520:	70 e0       	ldi	r23, 0x00	; 0
 522:	80 e8       	ldi	r24, 0x80	; 128
 524:	93 e4       	ldi	r25, 0x43	; 67
 526:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__subsf3>
 52a:	0e 94 76 05 	call	0xaec	; 0xaec <__fixunssfsi>
 52e:	03 c0       	rjmp	.+6      	; 0x536 <_delay+0xc4>
		numper_of_OverFlow = 1;
		
		}
		else if(ms == (int)MaxDelay)
		{
		TimerInitial=0;
 530:	60 e0       	ldi	r22, 0x00	; 0
		numper_of_OverFlow=1;
 532:	c1 e0       	ldi	r28, 0x01	; 1
 534:	d0 e0       	ldi	r29, 0x00	; 0
		else
		{
		numper_of_OverFlow = ceil((double)ms/MaxDelay);
		TimerInitial = (1<<8) - ((double)ms/tick)/numper_of_OverFlow;
	}
	TCNT0 = TimerInitial;
 536:	62 bf       	out	0x32, r22	; 50
	TCCR0 |= (1<<2); 
 538:	83 b7       	in	r24, 0x33	; 51
 53a:	84 60       	ori	r24, 0x04	; 4
 53c:	83 bf       	out	0x33, r24	; 51
	TCCR0 = 0x00; 
}
void _delay(uint16_t ms){
	uint16_t numper_of_OverFlow,TimerInitial;
	double MaxDelay,tick;
	uint32_t Over_Flow_count=0;
 53e:	20 e0       	ldi	r18, 0x00	; 0
 540:	30 e0       	ldi	r19, 0x00	; 0
		numper_of_OverFlow = ceil((double)ms/MaxDelay);
		TimerInitial = (1<<8) - ((double)ms/tick)/numper_of_OverFlow;
	}
	TCNT0 = TimerInitial;
	TCCR0 |= (1<<2); 
	while(Over_Flow_count<numper_of_OverFlow){
 542:	08 c0       	rjmp	.+16     	; 0x554 <_delay+0xe2>
        while((TIFR & (1<<0)) == 0); //waiting for set overflow flag
 544:	08 b6       	in	r0, 0x38	; 56
 546:	00 fe       	sbrs	r0, 0
 548:	fd cf       	rjmp	.-6      	; 0x544 <_delay+0xd2>
 		TIFR |= (1<<0);//clear overflow flag
 54a:	88 b7       	in	r24, 0x38	; 56
 54c:	81 60       	ori	r24, 0x01	; 1
 54e:	88 bf       	out	0x38, r24	; 56
		Over_Flow_count++;
 550:	2f 5f       	subi	r18, 0xFF	; 255
 552:	3f 4f       	sbci	r19, 0xFF	; 255
		numper_of_OverFlow = ceil((double)ms/MaxDelay);
		TimerInitial = (1<<8) - ((double)ms/tick)/numper_of_OverFlow;
	}
	TCNT0 = TimerInitial;
	TCCR0 |= (1<<2); 
	while(Over_Flow_count<numper_of_OverFlow){
 554:	2c 17       	cp	r18, r28
 556:	3d 07       	cpc	r19, r29
 558:	a8 f3       	brcs	.-22     	; 0x544 <_delay+0xd2>
        while((TIFR & (1<<0)) == 0); //waiting for set overflow flag
 		TIFR |= (1<<0);//clear overflow flag
		Over_Flow_count++;
	}
	TCCR0 = 0x00; //stop the timer
 55a:	13 be       	out	0x33, r1	; 51
 55c:	df 91       	pop	r29
 55e:	cf 91       	pop	r28
 560:	ff 90       	pop	r15
 562:	ef 90       	pop	r14
 564:	df 90       	pop	r13
 566:	cf 90       	pop	r12
 568:	bf 90       	pop	r11
 56a:	af 90       	pop	r10
 56c:	9f 90       	pop	r9
 56e:	8f 90       	pop	r8
 570:	08 95       	ret

00000572 <main>:
 * Author : Abdallah
 */ 
#include "APPLICATION/app.h"
int main(void)
{
	APP_init();
 572:	0e 94 3e 00 	call	0x7c	; 0x7c <APP_init>
while (1) 
{ 
	APP_start();
 576:	0e 94 64 00 	call	0xc8	; 0xc8 <APP_start>
 57a:	fd cf       	rjmp	.-6      	; 0x576 <main+0x4>

0000057c <DIO_init>:
 */ 
#include "DIO.h"
//func def

void DIO_init(uint8_t Pin_Number,uint8_t Port_Number,uint8_t Direction){
	switch (Port_Number){
 57c:	62 34       	cpi	r22, 0x42	; 66
 57e:	59 f1       	breq	.+86     	; 0x5d6 <DIO_init+0x5a>
 580:	18 f4       	brcc	.+6      	; 0x588 <DIO_init+0xc>
 582:	61 34       	cpi	r22, 0x41	; 65
 584:	41 f0       	breq	.+16     	; 0x596 <DIO_init+0x1a>
 586:	08 95       	ret
 588:	63 34       	cpi	r22, 0x43	; 67
 58a:	09 f4       	brne	.+2      	; 0x58e <DIO_init+0x12>
 58c:	44 c0       	rjmp	.+136    	; 0x616 <DIO_init+0x9a>
 58e:	64 34       	cpi	r22, 0x44	; 68
 590:	09 f4       	brne	.+2      	; 0x594 <DIO_init+0x18>
 592:	60 c0       	rjmp	.+192    	; 0x654 <DIO_init+0xd8>
 594:	08 95       	ret
		case PORT_A :
		if (Direction == IN)
 596:	41 11       	cpse	r20, r1
 598:	0e c0       	rjmp	.+28     	; 0x5b6 <DIO_init+0x3a>
		{
			DDRA &= ~(1<<Pin_Number);
 59a:	4a b3       	in	r20, 0x1a	; 26
 59c:	21 e0       	ldi	r18, 0x01	; 1
 59e:	30 e0       	ldi	r19, 0x00	; 0
 5a0:	b9 01       	movw	r22, r18
 5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <DIO_init+0x2c>
 5a4:	66 0f       	add	r22, r22
 5a6:	77 1f       	adc	r23, r23
 5a8:	8a 95       	dec	r24
 5aa:	e2 f7       	brpl	.-8      	; 0x5a4 <DIO_init+0x28>
 5ac:	cb 01       	movw	r24, r22
 5ae:	80 95       	com	r24
 5b0:	84 23       	and	r24, r20
 5b2:	8a bb       	out	0x1a, r24	; 26
 5b4:	08 95       	ret
		}
		else if (Direction == OUT)
 5b6:	41 30       	cpi	r20, 0x01	; 1
 5b8:	09 f0       	breq	.+2      	; 0x5bc <DIO_init+0x40>
 5ba:	6a c0       	rjmp	.+212    	; 0x690 <DIO_init+0x114>
		{
			DDRA |= (1<<Pin_Number);
 5bc:	4a b3       	in	r20, 0x1a	; 26
 5be:	21 e0       	ldi	r18, 0x01	; 1
 5c0:	30 e0       	ldi	r19, 0x00	; 0
 5c2:	b9 01       	movw	r22, r18
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <DIO_init+0x4e>
 5c6:	66 0f       	add	r22, r22
 5c8:	77 1f       	adc	r23, r23
 5ca:	8a 95       	dec	r24
 5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <DIO_init+0x4a>
 5ce:	cb 01       	movw	r24, r22
 5d0:	84 2b       	or	r24, r20
 5d2:	8a bb       	out	0x1a, r24	; 26
 5d4:	08 95       	ret
		else {
			//error handler
		}
		break;
		case PORT_B :
		if (Direction == IN)
 5d6:	41 11       	cpse	r20, r1
 5d8:	0e c0       	rjmp	.+28     	; 0x5f6 <DIO_init+0x7a>
		{
			DDRB &= ~(1<<Pin_Number);
 5da:	47 b3       	in	r20, 0x17	; 23
 5dc:	21 e0       	ldi	r18, 0x01	; 1
 5de:	30 e0       	ldi	r19, 0x00	; 0
 5e0:	b9 01       	movw	r22, r18
 5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <DIO_init+0x6c>
 5e4:	66 0f       	add	r22, r22
 5e6:	77 1f       	adc	r23, r23
 5e8:	8a 95       	dec	r24
 5ea:	e2 f7       	brpl	.-8      	; 0x5e4 <DIO_init+0x68>
 5ec:	cb 01       	movw	r24, r22
 5ee:	80 95       	com	r24
 5f0:	84 23       	and	r24, r20
 5f2:	87 bb       	out	0x17, r24	; 23
 5f4:	08 95       	ret
		}
		else if (Direction == OUT)
 5f6:	41 30       	cpi	r20, 0x01	; 1
 5f8:	09 f0       	breq	.+2      	; 0x5fc <DIO_init+0x80>
 5fa:	4a c0       	rjmp	.+148    	; 0x690 <DIO_init+0x114>
		{
			DDRB |= (1<<Pin_Number);
 5fc:	47 b3       	in	r20, 0x17	; 23
 5fe:	21 e0       	ldi	r18, 0x01	; 1
 600:	30 e0       	ldi	r19, 0x00	; 0
 602:	b9 01       	movw	r22, r18
 604:	02 c0       	rjmp	.+4      	; 0x60a <DIO_init+0x8e>
 606:	66 0f       	add	r22, r22
 608:	77 1f       	adc	r23, r23
 60a:	8a 95       	dec	r24
 60c:	e2 f7       	brpl	.-8      	; 0x606 <DIO_init+0x8a>
 60e:	cb 01       	movw	r24, r22
 610:	84 2b       	or	r24, r20
 612:	87 bb       	out	0x17, r24	; 23
 614:	08 95       	ret
		else {
			//error handler
		}
		break;
		case PORT_C :
		if (Direction == IN)
 616:	41 11       	cpse	r20, r1
 618:	0e c0       	rjmp	.+28     	; 0x636 <DIO_init+0xba>
		{
			DDRC &= ~(1<<Pin_Number);
 61a:	44 b3       	in	r20, 0x14	; 20
 61c:	21 e0       	ldi	r18, 0x01	; 1
 61e:	30 e0       	ldi	r19, 0x00	; 0
 620:	b9 01       	movw	r22, r18
 622:	02 c0       	rjmp	.+4      	; 0x628 <DIO_init+0xac>
 624:	66 0f       	add	r22, r22
 626:	77 1f       	adc	r23, r23
 628:	8a 95       	dec	r24
 62a:	e2 f7       	brpl	.-8      	; 0x624 <DIO_init+0xa8>
 62c:	cb 01       	movw	r24, r22
 62e:	80 95       	com	r24
 630:	84 23       	and	r24, r20
 632:	84 bb       	out	0x14, r24	; 20
 634:	08 95       	ret
		}
		else if (Direction == OUT)
 636:	41 30       	cpi	r20, 0x01	; 1
 638:	59 f5       	brne	.+86     	; 0x690 <DIO_init+0x114>
		{
			DDRC |= (1<<Pin_Number);
 63a:	44 b3       	in	r20, 0x14	; 20
 63c:	21 e0       	ldi	r18, 0x01	; 1
 63e:	30 e0       	ldi	r19, 0x00	; 0
 640:	b9 01       	movw	r22, r18
 642:	02 c0       	rjmp	.+4      	; 0x648 <DIO_init+0xcc>
 644:	66 0f       	add	r22, r22
 646:	77 1f       	adc	r23, r23
 648:	8a 95       	dec	r24
 64a:	e2 f7       	brpl	.-8      	; 0x644 <DIO_init+0xc8>
 64c:	cb 01       	movw	r24, r22
 64e:	84 2b       	or	r24, r20
 650:	84 bb       	out	0x14, r24	; 20
 652:	08 95       	ret
		else {
			//error handler
		}
		break;
		case PORT_D :
		if (Direction == IN)
 654:	41 11       	cpse	r20, r1
 656:	0e c0       	rjmp	.+28     	; 0x674 <DIO_init+0xf8>
		{
			DDRD &= ~(1<<Pin_Number);
 658:	41 b3       	in	r20, 0x11	; 17
 65a:	21 e0       	ldi	r18, 0x01	; 1
 65c:	30 e0       	ldi	r19, 0x00	; 0
 65e:	b9 01       	movw	r22, r18
 660:	02 c0       	rjmp	.+4      	; 0x666 <DIO_init+0xea>
 662:	66 0f       	add	r22, r22
 664:	77 1f       	adc	r23, r23
 666:	8a 95       	dec	r24
 668:	e2 f7       	brpl	.-8      	; 0x662 <DIO_init+0xe6>
 66a:	cb 01       	movw	r24, r22
 66c:	80 95       	com	r24
 66e:	84 23       	and	r24, r20
 670:	81 bb       	out	0x11, r24	; 17
 672:	08 95       	ret
		}
		else if (Direction == OUT)
 674:	41 30       	cpi	r20, 0x01	; 1
 676:	61 f4       	brne	.+24     	; 0x690 <DIO_init+0x114>
		{
			DDRD |= (1<<Pin_Number);
 678:	41 b3       	in	r20, 0x11	; 17
 67a:	21 e0       	ldi	r18, 0x01	; 1
 67c:	30 e0       	ldi	r19, 0x00	; 0
 67e:	b9 01       	movw	r22, r18
 680:	02 c0       	rjmp	.+4      	; 0x686 <DIO_init+0x10a>
 682:	66 0f       	add	r22, r22
 684:	77 1f       	adc	r23, r23
 686:	8a 95       	dec	r24
 688:	e2 f7       	brpl	.-8      	; 0x682 <DIO_init+0x106>
 68a:	cb 01       	movw	r24, r22
 68c:	84 2b       	or	r24, r20
 68e:	81 bb       	out	0x11, r24	; 17
 690:	08 95       	ret

00000692 <DIO_Write>:
		}
		break;
	}
}
void DIO_Write (uint8_t Pin_Number,uint8_t Port_Number,uint8_t Value){
	switch (Port_Number){
 692:	62 34       	cpi	r22, 0x42	; 66
 694:	09 f4       	brne	.+2      	; 0x698 <DIO_Write+0x6>
 696:	4a c0       	rjmp	.+148    	; 0x72c <DIO_Write+0x9a>
 698:	18 f4       	brcc	.+6      	; 0x6a0 <DIO_Write+0xe>
 69a:	61 34       	cpi	r22, 0x41	; 65
 69c:	39 f0       	breq	.+14     	; 0x6ac <DIO_Write+0x1a>
 69e:	08 95       	ret
 6a0:	63 34       	cpi	r22, 0x43	; 67
 6a2:	21 f1       	breq	.+72     	; 0x6ec <DIO_Write+0x5a>
 6a4:	64 34       	cpi	r22, 0x44	; 68
 6a6:	09 f4       	brne	.+2      	; 0x6aa <DIO_Write+0x18>
 6a8:	60 c0       	rjmp	.+192    	; 0x76a <DIO_Write+0xd8>
 6aa:	08 95       	ret
		case PORT_A :
		if (Value == LOW)//write 0
 6ac:	41 11       	cpse	r20, r1
 6ae:	0e c0       	rjmp	.+28     	; 0x6cc <DIO_Write+0x3a>
		{
			PORTA &= ~(1<<Pin_Number);
 6b0:	4b b3       	in	r20, 0x1b	; 27
 6b2:	21 e0       	ldi	r18, 0x01	; 1
 6b4:	30 e0       	ldi	r19, 0x00	; 0
 6b6:	b9 01       	movw	r22, r18
 6b8:	02 c0       	rjmp	.+4      	; 0x6be <DIO_Write+0x2c>
 6ba:	66 0f       	add	r22, r22
 6bc:	77 1f       	adc	r23, r23
 6be:	8a 95       	dec	r24
 6c0:	e2 f7       	brpl	.-8      	; 0x6ba <DIO_Write+0x28>
 6c2:	cb 01       	movw	r24, r22
 6c4:	80 95       	com	r24
 6c6:	84 23       	and	r24, r20
 6c8:	8b bb       	out	0x1b, r24	; 27
 6ca:	08 95       	ret
		}
		else if (Value == HIGh)
 6cc:	41 30       	cpi	r20, 0x01	; 1
 6ce:	09 f0       	breq	.+2      	; 0x6d2 <DIO_Write+0x40>
 6d0:	6a c0       	rjmp	.+212    	; 0x7a6 <DIO_Write+0x114>
		{
			PORTA |= (1<<Pin_Number);
 6d2:	4b b3       	in	r20, 0x1b	; 27
 6d4:	21 e0       	ldi	r18, 0x01	; 1
 6d6:	30 e0       	ldi	r19, 0x00	; 0
 6d8:	b9 01       	movw	r22, r18
 6da:	02 c0       	rjmp	.+4      	; 0x6e0 <DIO_Write+0x4e>
 6dc:	66 0f       	add	r22, r22
 6de:	77 1f       	adc	r23, r23
 6e0:	8a 95       	dec	r24
 6e2:	e2 f7       	brpl	.-8      	; 0x6dc <DIO_Write+0x4a>
 6e4:	cb 01       	movw	r24, r22
 6e6:	84 2b       	or	r24, r20
 6e8:	8b bb       	out	0x1b, r24	; 27
 6ea:	08 95       	ret
		{
			//error handler
		}
		break;
		case PORT_C :
		if (Value == LOW)//write 0
 6ec:	41 11       	cpse	r20, r1
 6ee:	0e c0       	rjmp	.+28     	; 0x70c <DIO_Write+0x7a>
		{
			PORTC &= ~(1<<Pin_Number);
 6f0:	45 b3       	in	r20, 0x15	; 21
 6f2:	21 e0       	ldi	r18, 0x01	; 1
 6f4:	30 e0       	ldi	r19, 0x00	; 0
 6f6:	b9 01       	movw	r22, r18
 6f8:	02 c0       	rjmp	.+4      	; 0x6fe <DIO_Write+0x6c>
 6fa:	66 0f       	add	r22, r22
 6fc:	77 1f       	adc	r23, r23
 6fe:	8a 95       	dec	r24
 700:	e2 f7       	brpl	.-8      	; 0x6fa <DIO_Write+0x68>
 702:	cb 01       	movw	r24, r22
 704:	80 95       	com	r24
 706:	84 23       	and	r24, r20
 708:	85 bb       	out	0x15, r24	; 21
 70a:	08 95       	ret
		}
		else if (Value == HIGh)
 70c:	41 30       	cpi	r20, 0x01	; 1
 70e:	09 f0       	breq	.+2      	; 0x712 <DIO_Write+0x80>
 710:	4a c0       	rjmp	.+148    	; 0x7a6 <DIO_Write+0x114>
		{
			PORTC |= (1<<Pin_Number);
 712:	45 b3       	in	r20, 0x15	; 21
 714:	21 e0       	ldi	r18, 0x01	; 1
 716:	30 e0       	ldi	r19, 0x00	; 0
 718:	b9 01       	movw	r22, r18
 71a:	02 c0       	rjmp	.+4      	; 0x720 <DIO_Write+0x8e>
 71c:	66 0f       	add	r22, r22
 71e:	77 1f       	adc	r23, r23
 720:	8a 95       	dec	r24
 722:	e2 f7       	brpl	.-8      	; 0x71c <DIO_Write+0x8a>
 724:	cb 01       	movw	r24, r22
 726:	84 2b       	or	r24, r20
 728:	85 bb       	out	0x15, r24	; 21
 72a:	08 95       	ret
		{
			//error handler
		}
		break;
		case PORT_B :
		if (Value == LOW)//write 0
 72c:	41 11       	cpse	r20, r1
 72e:	0e c0       	rjmp	.+28     	; 0x74c <DIO_Write+0xba>
		{
			PORTB &= ~(1<<Pin_Number);
 730:	48 b3       	in	r20, 0x18	; 24
 732:	21 e0       	ldi	r18, 0x01	; 1
 734:	30 e0       	ldi	r19, 0x00	; 0
 736:	b9 01       	movw	r22, r18
 738:	02 c0       	rjmp	.+4      	; 0x73e <DIO_Write+0xac>
 73a:	66 0f       	add	r22, r22
 73c:	77 1f       	adc	r23, r23
 73e:	8a 95       	dec	r24
 740:	e2 f7       	brpl	.-8      	; 0x73a <DIO_Write+0xa8>
 742:	cb 01       	movw	r24, r22
 744:	80 95       	com	r24
 746:	84 23       	and	r24, r20
 748:	88 bb       	out	0x18, r24	; 24
 74a:	08 95       	ret
		}
		else if (Value == HIGh)
 74c:	41 30       	cpi	r20, 0x01	; 1
 74e:	59 f5       	brne	.+86     	; 0x7a6 <DIO_Write+0x114>
		{
			PORTB |= (1<<Pin_Number);
 750:	48 b3       	in	r20, 0x18	; 24
 752:	21 e0       	ldi	r18, 0x01	; 1
 754:	30 e0       	ldi	r19, 0x00	; 0
 756:	b9 01       	movw	r22, r18
 758:	02 c0       	rjmp	.+4      	; 0x75e <DIO_Write+0xcc>
 75a:	66 0f       	add	r22, r22
 75c:	77 1f       	adc	r23, r23
 75e:	8a 95       	dec	r24
 760:	e2 f7       	brpl	.-8      	; 0x75a <DIO_Write+0xc8>
 762:	cb 01       	movw	r24, r22
 764:	84 2b       	or	r24, r20
 766:	88 bb       	out	0x18, r24	; 24
 768:	08 95       	ret
		{
			//error handler
		}
		break;
		case PORT_D :
		if (Value == LOW)//write 0
 76a:	41 11       	cpse	r20, r1
 76c:	0e c0       	rjmp	.+28     	; 0x78a <DIO_Write+0xf8>
		{
			PORTD &= ~(1<<Pin_Number);
 76e:	42 b3       	in	r20, 0x12	; 18
 770:	21 e0       	ldi	r18, 0x01	; 1
 772:	30 e0       	ldi	r19, 0x00	; 0
 774:	b9 01       	movw	r22, r18
 776:	02 c0       	rjmp	.+4      	; 0x77c <DIO_Write+0xea>
 778:	66 0f       	add	r22, r22
 77a:	77 1f       	adc	r23, r23
 77c:	8a 95       	dec	r24
 77e:	e2 f7       	brpl	.-8      	; 0x778 <DIO_Write+0xe6>
 780:	cb 01       	movw	r24, r22
 782:	80 95       	com	r24
 784:	84 23       	and	r24, r20
 786:	82 bb       	out	0x12, r24	; 18
 788:	08 95       	ret
		}
		else if (Value == HIGh)
 78a:	41 30       	cpi	r20, 0x01	; 1
 78c:	61 f4       	brne	.+24     	; 0x7a6 <DIO_Write+0x114>
		{
			PORTD |= (1<<Pin_Number);
 78e:	42 b3       	in	r20, 0x12	; 18
 790:	21 e0       	ldi	r18, 0x01	; 1
 792:	30 e0       	ldi	r19, 0x00	; 0
 794:	b9 01       	movw	r22, r18
 796:	02 c0       	rjmp	.+4      	; 0x79c <DIO_Write+0x10a>
 798:	66 0f       	add	r22, r22
 79a:	77 1f       	adc	r23, r23
 79c:	8a 95       	dec	r24
 79e:	e2 f7       	brpl	.-8      	; 0x798 <DIO_Write+0x106>
 7a0:	cb 01       	movw	r24, r22
 7a2:	84 2b       	or	r24, r20
 7a4:	82 bb       	out	0x12, r24	; 18
 7a6:	08 95       	ret

000007a8 <DIO_toggle>:
		}
		break;
	}
}
void DIO_toggle(uint8_t Pin_Number,uint8_t Port_Number){
	switch (Port_Number){
 7a8:	62 34       	cpi	r22, 0x42	; 66
 7aa:	19 f1       	breq	.+70     	; 0x7f2 <DIO_toggle+0x4a>
 7ac:	18 f4       	brcc	.+6      	; 0x7b4 <DIO_toggle+0xc>
 7ae:	61 34       	cpi	r22, 0x41	; 65
 7b0:	31 f0       	breq	.+12     	; 0x7be <DIO_toggle+0x16>
 7b2:	08 95       	ret
 7b4:	63 34       	cpi	r22, 0x43	; 67
 7b6:	81 f0       	breq	.+32     	; 0x7d8 <DIO_toggle+0x30>
 7b8:	64 34       	cpi	r22, 0x44	; 68
 7ba:	41 f1       	breq	.+80     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7bc:	08 95       	ret
		case PORT_A :
		PORTA ^= (1<<Pin_Number);
 7be:	4b b3       	in	r20, 0x1b	; 27
 7c0:	21 e0       	ldi	r18, 0x01	; 1
 7c2:	30 e0       	ldi	r19, 0x00	; 0
 7c4:	b9 01       	movw	r22, r18
 7c6:	02 c0       	rjmp	.+4      	; 0x7cc <DIO_toggle+0x24>
 7c8:	66 0f       	add	r22, r22
 7ca:	77 1f       	adc	r23, r23
 7cc:	8a 95       	dec	r24
 7ce:	e2 f7       	brpl	.-8      	; 0x7c8 <DIO_toggle+0x20>
 7d0:	cb 01       	movw	r24, r22
 7d2:	84 27       	eor	r24, r20
 7d4:	8b bb       	out	0x1b, r24	; 27
		break;
 7d6:	08 95       	ret
		case PORT_C :
		PORTC ^= (1<<Pin_Number);
 7d8:	45 b3       	in	r20, 0x15	; 21
 7da:	21 e0       	ldi	r18, 0x01	; 1
 7dc:	30 e0       	ldi	r19, 0x00	; 0
 7de:	b9 01       	movw	r22, r18
 7e0:	02 c0       	rjmp	.+4      	; 0x7e6 <DIO_toggle+0x3e>
 7e2:	66 0f       	add	r22, r22
 7e4:	77 1f       	adc	r23, r23
 7e6:	8a 95       	dec	r24
 7e8:	e2 f7       	brpl	.-8      	; 0x7e2 <DIO_toggle+0x3a>
 7ea:	cb 01       	movw	r24, r22
 7ec:	84 27       	eor	r24, r20
 7ee:	85 bb       	out	0x15, r24	; 21
		break;
 7f0:	08 95       	ret
		case PORT_B :
		PORTB ^= (1<<Pin_Number);
 7f2:	48 b3       	in	r20, 0x18	; 24
 7f4:	21 e0       	ldi	r18, 0x01	; 1
 7f6:	30 e0       	ldi	r19, 0x00	; 0
 7f8:	b9 01       	movw	r22, r18
 7fa:	02 c0       	rjmp	.+4      	; 0x800 <__DATA_REGION_LENGTH__>
 7fc:	66 0f       	add	r22, r22
 7fe:	77 1f       	adc	r23, r23
 800:	8a 95       	dec	r24
 802:	e2 f7       	brpl	.-8      	; 0x7fc <DIO_toggle+0x54>
 804:	cb 01       	movw	r24, r22
 806:	84 27       	eor	r24, r20
 808:	88 bb       	out	0x18, r24	; 24
		break;
 80a:	08 95       	ret
		case PORT_D :
		PORTD ^= (1<<Pin_Number);
 80c:	42 b3       	in	r20, 0x12	; 18
 80e:	21 e0       	ldi	r18, 0x01	; 1
 810:	30 e0       	ldi	r19, 0x00	; 0
 812:	b9 01       	movw	r22, r18
 814:	02 c0       	rjmp	.+4      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 816:	66 0f       	add	r22, r22
 818:	77 1f       	adc	r23, r23
 81a:	8a 95       	dec	r24
 81c:	e2 f7       	brpl	.-8      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 81e:	cb 01       	movw	r24, r22
 820:	84 27       	eor	r24, r20
 822:	82 bb       	out	0x12, r24	; 18
 824:	08 95       	ret

00000826 <DIO_Read>:
		break;
	}
	
}
void DIO_Read(uint8_t Pin_Number,uint8_t Port_Number,uint8_t *Value){
	switch (Port_Number){
 826:	62 34       	cpi	r22, 0x42	; 66
 828:	c1 f1       	breq	.+112    	; 0x89a <__stack+0x3b>
 82a:	18 f4       	brcc	.+6      	; 0x832 <DIO_Read+0xc>
 82c:	61 34       	cpi	r22, 0x41	; 65
 82e:	39 f0       	breq	.+14     	; 0x83e <DIO_Read+0x18>
 830:	08 95       	ret
 832:	63 34       	cpi	r22, 0x43	; 67
 834:	d9 f0       	breq	.+54     	; 0x86c <__stack+0xd>
 836:	64 34       	cpi	r22, 0x44	; 68
 838:	09 f4       	brne	.+2      	; 0x83c <DIO_Read+0x16>
 83a:	46 c0       	rjmp	.+140    	; 0x8c8 <__stack+0x69>
 83c:	08 95       	ret
		case PORT_A :
		*Value = (PINA & (1<<Pin_Number))>>Pin_Number;
 83e:	99 b3       	in	r25, 0x19	; 25
 840:	21 e0       	ldi	r18, 0x01	; 1
 842:	30 e0       	ldi	r19, 0x00	; 0
 844:	b9 01       	movw	r22, r18
 846:	08 2e       	mov	r0, r24
 848:	02 c0       	rjmp	.+4      	; 0x84e <DIO_Read+0x28>
 84a:	66 0f       	add	r22, r22
 84c:	77 1f       	adc	r23, r23
 84e:	0a 94       	dec	r0
 850:	e2 f7       	brpl	.-8      	; 0x84a <DIO_Read+0x24>
 852:	29 2f       	mov	r18, r25
 854:	30 e0       	ldi	r19, 0x00	; 0
 856:	26 23       	and	r18, r22
 858:	37 23       	and	r19, r23
 85a:	b9 01       	movw	r22, r18
 85c:	02 c0       	rjmp	.+4      	; 0x862 <__stack+0x3>
 85e:	75 95       	asr	r23
 860:	67 95       	ror	r22
 862:	8a 95       	dec	r24
 864:	e2 f7       	brpl	.-8      	; 0x85e <DIO_Read+0x38>
 866:	fa 01       	movw	r30, r20
 868:	60 83       	st	Z, r22
		break;
 86a:	08 95       	ret
		case PORT_C :
		*Value = (PINC & (1<<Pin_Number))>>Pin_Number;
 86c:	93 b3       	in	r25, 0x13	; 19
 86e:	21 e0       	ldi	r18, 0x01	; 1
 870:	30 e0       	ldi	r19, 0x00	; 0
 872:	b9 01       	movw	r22, r18
 874:	08 2e       	mov	r0, r24
 876:	02 c0       	rjmp	.+4      	; 0x87c <__stack+0x1d>
 878:	66 0f       	add	r22, r22
 87a:	77 1f       	adc	r23, r23
 87c:	0a 94       	dec	r0
 87e:	e2 f7       	brpl	.-8      	; 0x878 <__stack+0x19>
 880:	29 2f       	mov	r18, r25
 882:	30 e0       	ldi	r19, 0x00	; 0
 884:	26 23       	and	r18, r22
 886:	37 23       	and	r19, r23
 888:	b9 01       	movw	r22, r18
 88a:	02 c0       	rjmp	.+4      	; 0x890 <__stack+0x31>
 88c:	75 95       	asr	r23
 88e:	67 95       	ror	r22
 890:	8a 95       	dec	r24
 892:	e2 f7       	brpl	.-8      	; 0x88c <__stack+0x2d>
 894:	fa 01       	movw	r30, r20
 896:	60 83       	st	Z, r22
		break;
 898:	08 95       	ret
		case PORT_B :
		*Value = (PINB & (1<<Pin_Number))>>Pin_Number;
 89a:	96 b3       	in	r25, 0x16	; 22
 89c:	21 e0       	ldi	r18, 0x01	; 1
 89e:	30 e0       	ldi	r19, 0x00	; 0
 8a0:	b9 01       	movw	r22, r18
 8a2:	08 2e       	mov	r0, r24
 8a4:	02 c0       	rjmp	.+4      	; 0x8aa <__stack+0x4b>
 8a6:	66 0f       	add	r22, r22
 8a8:	77 1f       	adc	r23, r23
 8aa:	0a 94       	dec	r0
 8ac:	e2 f7       	brpl	.-8      	; 0x8a6 <__stack+0x47>
 8ae:	29 2f       	mov	r18, r25
 8b0:	30 e0       	ldi	r19, 0x00	; 0
 8b2:	26 23       	and	r18, r22
 8b4:	37 23       	and	r19, r23
 8b6:	b9 01       	movw	r22, r18
 8b8:	02 c0       	rjmp	.+4      	; 0x8be <__stack+0x5f>
 8ba:	75 95       	asr	r23
 8bc:	67 95       	ror	r22
 8be:	8a 95       	dec	r24
 8c0:	e2 f7       	brpl	.-8      	; 0x8ba <__stack+0x5b>
 8c2:	fa 01       	movw	r30, r20
 8c4:	60 83       	st	Z, r22
		break;
 8c6:	08 95       	ret
		case PORT_D :
		*Value = (PIND & (1<<Pin_Number))>>Pin_Number;
 8c8:	90 b3       	in	r25, 0x10	; 16
 8ca:	21 e0       	ldi	r18, 0x01	; 1
 8cc:	30 e0       	ldi	r19, 0x00	; 0
 8ce:	b9 01       	movw	r22, r18
 8d0:	08 2e       	mov	r0, r24
 8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <__stack+0x79>
 8d4:	66 0f       	add	r22, r22
 8d6:	77 1f       	adc	r23, r23
 8d8:	0a 94       	dec	r0
 8da:	e2 f7       	brpl	.-8      	; 0x8d4 <__stack+0x75>
 8dc:	29 2f       	mov	r18, r25
 8de:	30 e0       	ldi	r19, 0x00	; 0
 8e0:	26 23       	and	r18, r22
 8e2:	37 23       	and	r19, r23
 8e4:	b9 01       	movw	r22, r18
 8e6:	02 c0       	rjmp	.+4      	; 0x8ec <__stack+0x8d>
 8e8:	75 95       	asr	r23
 8ea:	67 95       	ror	r22
 8ec:	8a 95       	dec	r24
 8ee:	e2 f7       	brpl	.-8      	; 0x8e8 <__stack+0x89>
 8f0:	fa 01       	movw	r30, r20
 8f2:	60 83       	st	Z, r22
 8f4:	08 95       	ret

000008f6 <__subsf3>:
 8f6:	50 58       	subi	r21, 0x80	; 128

000008f8 <__addsf3>:
 8f8:	bb 27       	eor	r27, r27
 8fa:	aa 27       	eor	r26, r26
 8fc:	0e 94 93 04 	call	0x926	; 0x926 <__addsf3x>
 900:	0c 94 46 06 	jmp	0xc8c	; 0xc8c <__fp_round>
 904:	0e 94 38 06 	call	0xc70	; 0xc70 <__fp_pscA>
 908:	38 f0       	brcs	.+14     	; 0x918 <__addsf3+0x20>
 90a:	0e 94 3f 06 	call	0xc7e	; 0xc7e <__fp_pscB>
 90e:	20 f0       	brcs	.+8      	; 0x918 <__addsf3+0x20>
 910:	39 f4       	brne	.+14     	; 0x920 <__addsf3+0x28>
 912:	9f 3f       	cpi	r25, 0xFF	; 255
 914:	19 f4       	brne	.+6      	; 0x91c <__addsf3+0x24>
 916:	26 f4       	brtc	.+8      	; 0x920 <__addsf3+0x28>
 918:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__fp_nan>
 91c:	0e f4       	brtc	.+2      	; 0x920 <__addsf3+0x28>
 91e:	e0 95       	com	r30
 920:	e7 fb       	bst	r30, 7
 922:	0c 94 06 06 	jmp	0xc0c	; 0xc0c <__fp_inf>

00000926 <__addsf3x>:
 926:	e9 2f       	mov	r30, r25
 928:	0e 94 57 06 	call	0xcae	; 0xcae <__fp_split3>
 92c:	58 f3       	brcs	.-42     	; 0x904 <__addsf3+0xc>
 92e:	ba 17       	cp	r27, r26
 930:	62 07       	cpc	r22, r18
 932:	73 07       	cpc	r23, r19
 934:	84 07       	cpc	r24, r20
 936:	95 07       	cpc	r25, r21
 938:	20 f0       	brcs	.+8      	; 0x942 <__addsf3x+0x1c>
 93a:	79 f4       	brne	.+30     	; 0x95a <__addsf3x+0x34>
 93c:	a6 f5       	brtc	.+104    	; 0x9a6 <__addsf3x+0x80>
 93e:	0c 94 91 06 	jmp	0xd22	; 0xd22 <__fp_zero>
 942:	0e f4       	brtc	.+2      	; 0x946 <__addsf3x+0x20>
 944:	e0 95       	com	r30
 946:	0b 2e       	mov	r0, r27
 948:	ba 2f       	mov	r27, r26
 94a:	a0 2d       	mov	r26, r0
 94c:	0b 01       	movw	r0, r22
 94e:	b9 01       	movw	r22, r18
 950:	90 01       	movw	r18, r0
 952:	0c 01       	movw	r0, r24
 954:	ca 01       	movw	r24, r20
 956:	a0 01       	movw	r20, r0
 958:	11 24       	eor	r1, r1
 95a:	ff 27       	eor	r31, r31
 95c:	59 1b       	sub	r21, r25
 95e:	99 f0       	breq	.+38     	; 0x986 <__addsf3x+0x60>
 960:	59 3f       	cpi	r21, 0xF9	; 249
 962:	50 f4       	brcc	.+20     	; 0x978 <__addsf3x+0x52>
 964:	50 3e       	cpi	r21, 0xE0	; 224
 966:	68 f1       	brcs	.+90     	; 0x9c2 <__addsf3x+0x9c>
 968:	1a 16       	cp	r1, r26
 96a:	f0 40       	sbci	r31, 0x00	; 0
 96c:	a2 2f       	mov	r26, r18
 96e:	23 2f       	mov	r18, r19
 970:	34 2f       	mov	r19, r20
 972:	44 27       	eor	r20, r20
 974:	58 5f       	subi	r21, 0xF8	; 248
 976:	f3 cf       	rjmp	.-26     	; 0x95e <__addsf3x+0x38>
 978:	46 95       	lsr	r20
 97a:	37 95       	ror	r19
 97c:	27 95       	ror	r18
 97e:	a7 95       	ror	r26
 980:	f0 40       	sbci	r31, 0x00	; 0
 982:	53 95       	inc	r21
 984:	c9 f7       	brne	.-14     	; 0x978 <__addsf3x+0x52>
 986:	7e f4       	brtc	.+30     	; 0x9a6 <__addsf3x+0x80>
 988:	1f 16       	cp	r1, r31
 98a:	ba 0b       	sbc	r27, r26
 98c:	62 0b       	sbc	r22, r18
 98e:	73 0b       	sbc	r23, r19
 990:	84 0b       	sbc	r24, r20
 992:	ba f0       	brmi	.+46     	; 0x9c2 <__addsf3x+0x9c>
 994:	91 50       	subi	r25, 0x01	; 1
 996:	a1 f0       	breq	.+40     	; 0x9c0 <__addsf3x+0x9a>
 998:	ff 0f       	add	r31, r31
 99a:	bb 1f       	adc	r27, r27
 99c:	66 1f       	adc	r22, r22
 99e:	77 1f       	adc	r23, r23
 9a0:	88 1f       	adc	r24, r24
 9a2:	c2 f7       	brpl	.-16     	; 0x994 <__addsf3x+0x6e>
 9a4:	0e c0       	rjmp	.+28     	; 0x9c2 <__addsf3x+0x9c>
 9a6:	ba 0f       	add	r27, r26
 9a8:	62 1f       	adc	r22, r18
 9aa:	73 1f       	adc	r23, r19
 9ac:	84 1f       	adc	r24, r20
 9ae:	48 f4       	brcc	.+18     	; 0x9c2 <__addsf3x+0x9c>
 9b0:	87 95       	ror	r24
 9b2:	77 95       	ror	r23
 9b4:	67 95       	ror	r22
 9b6:	b7 95       	ror	r27
 9b8:	f7 95       	ror	r31
 9ba:	9e 3f       	cpi	r25, 0xFE	; 254
 9bc:	08 f0       	brcs	.+2      	; 0x9c0 <__addsf3x+0x9a>
 9be:	b0 cf       	rjmp	.-160    	; 0x920 <__addsf3+0x28>
 9c0:	93 95       	inc	r25
 9c2:	88 0f       	add	r24, r24
 9c4:	08 f0       	brcs	.+2      	; 0x9c8 <__addsf3x+0xa2>
 9c6:	99 27       	eor	r25, r25
 9c8:	ee 0f       	add	r30, r30
 9ca:	97 95       	ror	r25
 9cc:	87 95       	ror	r24
 9ce:	08 95       	ret

000009d0 <ceil>:
 9d0:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__fp_trunc>
 9d4:	90 f0       	brcs	.+36     	; 0x9fa <ceil+0x2a>
 9d6:	9f 37       	cpi	r25, 0x7F	; 127
 9d8:	48 f4       	brcc	.+18     	; 0x9ec <ceil+0x1c>
 9da:	91 11       	cpse	r25, r1
 9dc:	16 f4       	brtc	.+4      	; 0x9e2 <ceil+0x12>
 9de:	0c 94 92 06 	jmp	0xd24	; 0xd24 <__fp_szero>
 9e2:	60 e0       	ldi	r22, 0x00	; 0
 9e4:	70 e0       	ldi	r23, 0x00	; 0
 9e6:	80 e8       	ldi	r24, 0x80	; 128
 9e8:	9f e3       	ldi	r25, 0x3F	; 63
 9ea:	08 95       	ret
 9ec:	26 f0       	brts	.+8      	; 0x9f6 <ceil+0x26>
 9ee:	1b 16       	cp	r1, r27
 9f0:	61 1d       	adc	r22, r1
 9f2:	71 1d       	adc	r23, r1
 9f4:	81 1d       	adc	r24, r1
 9f6:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__fp_mintl>
 9fa:	0c 94 27 06 	jmp	0xc4e	; 0xc4e <__fp_mpack>

000009fe <__cmpsf2>:
 9fe:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <__fp_cmp>
 a02:	08 f4       	brcc	.+2      	; 0xa06 <__cmpsf2+0x8>
 a04:	81 e0       	ldi	r24, 0x01	; 1
 a06:	08 95       	ret

00000a08 <__divsf3>:
 a08:	0e 94 18 05 	call	0xa30	; 0xa30 <__divsf3x>
 a0c:	0c 94 46 06 	jmp	0xc8c	; 0xc8c <__fp_round>
 a10:	0e 94 3f 06 	call	0xc7e	; 0xc7e <__fp_pscB>
 a14:	58 f0       	brcs	.+22     	; 0xa2c <__divsf3+0x24>
 a16:	0e 94 38 06 	call	0xc70	; 0xc70 <__fp_pscA>
 a1a:	40 f0       	brcs	.+16     	; 0xa2c <__divsf3+0x24>
 a1c:	29 f4       	brne	.+10     	; 0xa28 <__divsf3+0x20>
 a1e:	5f 3f       	cpi	r21, 0xFF	; 255
 a20:	29 f0       	breq	.+10     	; 0xa2c <__divsf3+0x24>
 a22:	0c 94 06 06 	jmp	0xc0c	; 0xc0c <__fp_inf>
 a26:	51 11       	cpse	r21, r1
 a28:	0c 94 92 06 	jmp	0xd24	; 0xd24 <__fp_szero>
 a2c:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__fp_nan>

00000a30 <__divsf3x>:
 a30:	0e 94 57 06 	call	0xcae	; 0xcae <__fp_split3>
 a34:	68 f3       	brcs	.-38     	; 0xa10 <__divsf3+0x8>

00000a36 <__divsf3_pse>:
 a36:	99 23       	and	r25, r25
 a38:	b1 f3       	breq	.-20     	; 0xa26 <__divsf3+0x1e>
 a3a:	55 23       	and	r21, r21
 a3c:	91 f3       	breq	.-28     	; 0xa22 <__divsf3+0x1a>
 a3e:	95 1b       	sub	r25, r21
 a40:	55 0b       	sbc	r21, r21
 a42:	bb 27       	eor	r27, r27
 a44:	aa 27       	eor	r26, r26
 a46:	62 17       	cp	r22, r18
 a48:	73 07       	cpc	r23, r19
 a4a:	84 07       	cpc	r24, r20
 a4c:	38 f0       	brcs	.+14     	; 0xa5c <__divsf3_pse+0x26>
 a4e:	9f 5f       	subi	r25, 0xFF	; 255
 a50:	5f 4f       	sbci	r21, 0xFF	; 255
 a52:	22 0f       	add	r18, r18
 a54:	33 1f       	adc	r19, r19
 a56:	44 1f       	adc	r20, r20
 a58:	aa 1f       	adc	r26, r26
 a5a:	a9 f3       	breq	.-22     	; 0xa46 <__divsf3_pse+0x10>
 a5c:	35 d0       	rcall	.+106    	; 0xac8 <__divsf3_pse+0x92>
 a5e:	0e 2e       	mov	r0, r30
 a60:	3a f0       	brmi	.+14     	; 0xa70 <__divsf3_pse+0x3a>
 a62:	e0 e8       	ldi	r30, 0x80	; 128
 a64:	32 d0       	rcall	.+100    	; 0xaca <__divsf3_pse+0x94>
 a66:	91 50       	subi	r25, 0x01	; 1
 a68:	50 40       	sbci	r21, 0x00	; 0
 a6a:	e6 95       	lsr	r30
 a6c:	00 1c       	adc	r0, r0
 a6e:	ca f7       	brpl	.-14     	; 0xa62 <__divsf3_pse+0x2c>
 a70:	2b d0       	rcall	.+86     	; 0xac8 <__divsf3_pse+0x92>
 a72:	fe 2f       	mov	r31, r30
 a74:	29 d0       	rcall	.+82     	; 0xac8 <__divsf3_pse+0x92>
 a76:	66 0f       	add	r22, r22
 a78:	77 1f       	adc	r23, r23
 a7a:	88 1f       	adc	r24, r24
 a7c:	bb 1f       	adc	r27, r27
 a7e:	26 17       	cp	r18, r22
 a80:	37 07       	cpc	r19, r23
 a82:	48 07       	cpc	r20, r24
 a84:	ab 07       	cpc	r26, r27
 a86:	b0 e8       	ldi	r27, 0x80	; 128
 a88:	09 f0       	breq	.+2      	; 0xa8c <__divsf3_pse+0x56>
 a8a:	bb 0b       	sbc	r27, r27
 a8c:	80 2d       	mov	r24, r0
 a8e:	bf 01       	movw	r22, r30
 a90:	ff 27       	eor	r31, r31
 a92:	93 58       	subi	r25, 0x83	; 131
 a94:	5f 4f       	sbci	r21, 0xFF	; 255
 a96:	3a f0       	brmi	.+14     	; 0xaa6 <__divsf3_pse+0x70>
 a98:	9e 3f       	cpi	r25, 0xFE	; 254
 a9a:	51 05       	cpc	r21, r1
 a9c:	78 f0       	brcs	.+30     	; 0xabc <__divsf3_pse+0x86>
 a9e:	0c 94 06 06 	jmp	0xc0c	; 0xc0c <__fp_inf>
 aa2:	0c 94 92 06 	jmp	0xd24	; 0xd24 <__fp_szero>
 aa6:	5f 3f       	cpi	r21, 0xFF	; 255
 aa8:	e4 f3       	brlt	.-8      	; 0xaa2 <__divsf3_pse+0x6c>
 aaa:	98 3e       	cpi	r25, 0xE8	; 232
 aac:	d4 f3       	brlt	.-12     	; 0xaa2 <__divsf3_pse+0x6c>
 aae:	86 95       	lsr	r24
 ab0:	77 95       	ror	r23
 ab2:	67 95       	ror	r22
 ab4:	b7 95       	ror	r27
 ab6:	f7 95       	ror	r31
 ab8:	9f 5f       	subi	r25, 0xFF	; 255
 aba:	c9 f7       	brne	.-14     	; 0xaae <__divsf3_pse+0x78>
 abc:	88 0f       	add	r24, r24
 abe:	91 1d       	adc	r25, r1
 ac0:	96 95       	lsr	r25
 ac2:	87 95       	ror	r24
 ac4:	97 f9       	bld	r25, 7
 ac6:	08 95       	ret
 ac8:	e1 e0       	ldi	r30, 0x01	; 1
 aca:	66 0f       	add	r22, r22
 acc:	77 1f       	adc	r23, r23
 ace:	88 1f       	adc	r24, r24
 ad0:	bb 1f       	adc	r27, r27
 ad2:	62 17       	cp	r22, r18
 ad4:	73 07       	cpc	r23, r19
 ad6:	84 07       	cpc	r24, r20
 ad8:	ba 07       	cpc	r27, r26
 ada:	20 f0       	brcs	.+8      	; 0xae4 <__divsf3_pse+0xae>
 adc:	62 1b       	sub	r22, r18
 ade:	73 0b       	sbc	r23, r19
 ae0:	84 0b       	sbc	r24, r20
 ae2:	ba 0b       	sbc	r27, r26
 ae4:	ee 1f       	adc	r30, r30
 ae6:	88 f7       	brcc	.-30     	; 0xaca <__divsf3_pse+0x94>
 ae8:	e0 95       	com	r30
 aea:	08 95       	ret

00000aec <__fixunssfsi>:
 aec:	0e 94 5f 06 	call	0xcbe	; 0xcbe <__fp_splitA>
 af0:	88 f0       	brcs	.+34     	; 0xb14 <__fixunssfsi+0x28>
 af2:	9f 57       	subi	r25, 0x7F	; 127
 af4:	98 f0       	brcs	.+38     	; 0xb1c <__fixunssfsi+0x30>
 af6:	b9 2f       	mov	r27, r25
 af8:	99 27       	eor	r25, r25
 afa:	b7 51       	subi	r27, 0x17	; 23
 afc:	b0 f0       	brcs	.+44     	; 0xb2a <__fixunssfsi+0x3e>
 afe:	e1 f0       	breq	.+56     	; 0xb38 <__fixunssfsi+0x4c>
 b00:	66 0f       	add	r22, r22
 b02:	77 1f       	adc	r23, r23
 b04:	88 1f       	adc	r24, r24
 b06:	99 1f       	adc	r25, r25
 b08:	1a f0       	brmi	.+6      	; 0xb10 <__fixunssfsi+0x24>
 b0a:	ba 95       	dec	r27
 b0c:	c9 f7       	brne	.-14     	; 0xb00 <__fixunssfsi+0x14>
 b0e:	14 c0       	rjmp	.+40     	; 0xb38 <__fixunssfsi+0x4c>
 b10:	b1 30       	cpi	r27, 0x01	; 1
 b12:	91 f0       	breq	.+36     	; 0xb38 <__fixunssfsi+0x4c>
 b14:	0e 94 91 06 	call	0xd22	; 0xd22 <__fp_zero>
 b18:	b1 e0       	ldi	r27, 0x01	; 1
 b1a:	08 95       	ret
 b1c:	0c 94 91 06 	jmp	0xd22	; 0xd22 <__fp_zero>
 b20:	67 2f       	mov	r22, r23
 b22:	78 2f       	mov	r23, r24
 b24:	88 27       	eor	r24, r24
 b26:	b8 5f       	subi	r27, 0xF8	; 248
 b28:	39 f0       	breq	.+14     	; 0xb38 <__fixunssfsi+0x4c>
 b2a:	b9 3f       	cpi	r27, 0xF9	; 249
 b2c:	cc f3       	brlt	.-14     	; 0xb20 <__fixunssfsi+0x34>
 b2e:	86 95       	lsr	r24
 b30:	77 95       	ror	r23
 b32:	67 95       	ror	r22
 b34:	b3 95       	inc	r27
 b36:	d9 f7       	brne	.-10     	; 0xb2e <__fixunssfsi+0x42>
 b38:	3e f4       	brtc	.+14     	; 0xb48 <__fixunssfsi+0x5c>
 b3a:	90 95       	com	r25
 b3c:	80 95       	com	r24
 b3e:	70 95       	com	r23
 b40:	61 95       	neg	r22
 b42:	7f 4f       	sbci	r23, 0xFF	; 255
 b44:	8f 4f       	sbci	r24, 0xFF	; 255
 b46:	9f 4f       	sbci	r25, 0xFF	; 255
 b48:	08 95       	ret

00000b4a <__floatunsisf>:
 b4a:	e8 94       	clt
 b4c:	09 c0       	rjmp	.+18     	; 0xb60 <__floatsisf+0x12>

00000b4e <__floatsisf>:
 b4e:	97 fb       	bst	r25, 7
 b50:	3e f4       	brtc	.+14     	; 0xb60 <__floatsisf+0x12>
 b52:	90 95       	com	r25
 b54:	80 95       	com	r24
 b56:	70 95       	com	r23
 b58:	61 95       	neg	r22
 b5a:	7f 4f       	sbci	r23, 0xFF	; 255
 b5c:	8f 4f       	sbci	r24, 0xFF	; 255
 b5e:	9f 4f       	sbci	r25, 0xFF	; 255
 b60:	99 23       	and	r25, r25
 b62:	a9 f0       	breq	.+42     	; 0xb8e <__floatsisf+0x40>
 b64:	f9 2f       	mov	r31, r25
 b66:	96 e9       	ldi	r25, 0x96	; 150
 b68:	bb 27       	eor	r27, r27
 b6a:	93 95       	inc	r25
 b6c:	f6 95       	lsr	r31
 b6e:	87 95       	ror	r24
 b70:	77 95       	ror	r23
 b72:	67 95       	ror	r22
 b74:	b7 95       	ror	r27
 b76:	f1 11       	cpse	r31, r1
 b78:	f8 cf       	rjmp	.-16     	; 0xb6a <__floatsisf+0x1c>
 b7a:	fa f4       	brpl	.+62     	; 0xbba <__floatsisf+0x6c>
 b7c:	bb 0f       	add	r27, r27
 b7e:	11 f4       	brne	.+4      	; 0xb84 <__floatsisf+0x36>
 b80:	60 ff       	sbrs	r22, 0
 b82:	1b c0       	rjmp	.+54     	; 0xbba <__floatsisf+0x6c>
 b84:	6f 5f       	subi	r22, 0xFF	; 255
 b86:	7f 4f       	sbci	r23, 0xFF	; 255
 b88:	8f 4f       	sbci	r24, 0xFF	; 255
 b8a:	9f 4f       	sbci	r25, 0xFF	; 255
 b8c:	16 c0       	rjmp	.+44     	; 0xbba <__floatsisf+0x6c>
 b8e:	88 23       	and	r24, r24
 b90:	11 f0       	breq	.+4      	; 0xb96 <__floatsisf+0x48>
 b92:	96 e9       	ldi	r25, 0x96	; 150
 b94:	11 c0       	rjmp	.+34     	; 0xbb8 <__floatsisf+0x6a>
 b96:	77 23       	and	r23, r23
 b98:	21 f0       	breq	.+8      	; 0xba2 <__floatsisf+0x54>
 b9a:	9e e8       	ldi	r25, 0x8E	; 142
 b9c:	87 2f       	mov	r24, r23
 b9e:	76 2f       	mov	r23, r22
 ba0:	05 c0       	rjmp	.+10     	; 0xbac <__floatsisf+0x5e>
 ba2:	66 23       	and	r22, r22
 ba4:	71 f0       	breq	.+28     	; 0xbc2 <__floatsisf+0x74>
 ba6:	96 e8       	ldi	r25, 0x86	; 134
 ba8:	86 2f       	mov	r24, r22
 baa:	70 e0       	ldi	r23, 0x00	; 0
 bac:	60 e0       	ldi	r22, 0x00	; 0
 bae:	2a f0       	brmi	.+10     	; 0xbba <__floatsisf+0x6c>
 bb0:	9a 95       	dec	r25
 bb2:	66 0f       	add	r22, r22
 bb4:	77 1f       	adc	r23, r23
 bb6:	88 1f       	adc	r24, r24
 bb8:	da f7       	brpl	.-10     	; 0xbb0 <__floatsisf+0x62>
 bba:	88 0f       	add	r24, r24
 bbc:	96 95       	lsr	r25
 bbe:	87 95       	ror	r24
 bc0:	97 f9       	bld	r25, 7
 bc2:	08 95       	ret

00000bc4 <__fp_cmp>:
 bc4:	99 0f       	add	r25, r25
 bc6:	00 08       	sbc	r0, r0
 bc8:	55 0f       	add	r21, r21
 bca:	aa 0b       	sbc	r26, r26
 bcc:	e0 e8       	ldi	r30, 0x80	; 128
 bce:	fe ef       	ldi	r31, 0xFE	; 254
 bd0:	16 16       	cp	r1, r22
 bd2:	17 06       	cpc	r1, r23
 bd4:	e8 07       	cpc	r30, r24
 bd6:	f9 07       	cpc	r31, r25
 bd8:	c0 f0       	brcs	.+48     	; 0xc0a <__fp_cmp+0x46>
 bda:	12 16       	cp	r1, r18
 bdc:	13 06       	cpc	r1, r19
 bde:	e4 07       	cpc	r30, r20
 be0:	f5 07       	cpc	r31, r21
 be2:	98 f0       	brcs	.+38     	; 0xc0a <__fp_cmp+0x46>
 be4:	62 1b       	sub	r22, r18
 be6:	73 0b       	sbc	r23, r19
 be8:	84 0b       	sbc	r24, r20
 bea:	95 0b       	sbc	r25, r21
 bec:	39 f4       	brne	.+14     	; 0xbfc <__fp_cmp+0x38>
 bee:	0a 26       	eor	r0, r26
 bf0:	61 f0       	breq	.+24     	; 0xc0a <__fp_cmp+0x46>
 bf2:	23 2b       	or	r18, r19
 bf4:	24 2b       	or	r18, r20
 bf6:	25 2b       	or	r18, r21
 bf8:	21 f4       	brne	.+8      	; 0xc02 <__fp_cmp+0x3e>
 bfa:	08 95       	ret
 bfc:	0a 26       	eor	r0, r26
 bfe:	09 f4       	brne	.+2      	; 0xc02 <__fp_cmp+0x3e>
 c00:	a1 40       	sbci	r26, 0x01	; 1
 c02:	a6 95       	lsr	r26
 c04:	8f ef       	ldi	r24, 0xFF	; 255
 c06:	81 1d       	adc	r24, r1
 c08:	81 1d       	adc	r24, r1
 c0a:	08 95       	ret

00000c0c <__fp_inf>:
 c0c:	97 f9       	bld	r25, 7
 c0e:	9f 67       	ori	r25, 0x7F	; 127
 c10:	80 e8       	ldi	r24, 0x80	; 128
 c12:	70 e0       	ldi	r23, 0x00	; 0
 c14:	60 e0       	ldi	r22, 0x00	; 0
 c16:	08 95       	ret

00000c18 <__fp_mintl>:
 c18:	88 23       	and	r24, r24
 c1a:	71 f4       	brne	.+28     	; 0xc38 <__fp_mintl+0x20>
 c1c:	77 23       	and	r23, r23
 c1e:	21 f0       	breq	.+8      	; 0xc28 <__fp_mintl+0x10>
 c20:	98 50       	subi	r25, 0x08	; 8
 c22:	87 2b       	or	r24, r23
 c24:	76 2f       	mov	r23, r22
 c26:	07 c0       	rjmp	.+14     	; 0xc36 <__fp_mintl+0x1e>
 c28:	66 23       	and	r22, r22
 c2a:	11 f4       	brne	.+4      	; 0xc30 <__fp_mintl+0x18>
 c2c:	99 27       	eor	r25, r25
 c2e:	0d c0       	rjmp	.+26     	; 0xc4a <__fp_mintl+0x32>
 c30:	90 51       	subi	r25, 0x10	; 16
 c32:	86 2b       	or	r24, r22
 c34:	70 e0       	ldi	r23, 0x00	; 0
 c36:	60 e0       	ldi	r22, 0x00	; 0
 c38:	2a f0       	brmi	.+10     	; 0xc44 <__fp_mintl+0x2c>
 c3a:	9a 95       	dec	r25
 c3c:	66 0f       	add	r22, r22
 c3e:	77 1f       	adc	r23, r23
 c40:	88 1f       	adc	r24, r24
 c42:	da f7       	brpl	.-10     	; 0xc3a <__fp_mintl+0x22>
 c44:	88 0f       	add	r24, r24
 c46:	96 95       	lsr	r25
 c48:	87 95       	ror	r24
 c4a:	97 f9       	bld	r25, 7
 c4c:	08 95       	ret

00000c4e <__fp_mpack>:
 c4e:	9f 3f       	cpi	r25, 0xFF	; 255
 c50:	31 f0       	breq	.+12     	; 0xc5e <__fp_mpack_finite+0xc>

00000c52 <__fp_mpack_finite>:
 c52:	91 50       	subi	r25, 0x01	; 1
 c54:	20 f4       	brcc	.+8      	; 0xc5e <__fp_mpack_finite+0xc>
 c56:	87 95       	ror	r24
 c58:	77 95       	ror	r23
 c5a:	67 95       	ror	r22
 c5c:	b7 95       	ror	r27
 c5e:	88 0f       	add	r24, r24
 c60:	91 1d       	adc	r25, r1
 c62:	96 95       	lsr	r25
 c64:	87 95       	ror	r24
 c66:	97 f9       	bld	r25, 7
 c68:	08 95       	ret

00000c6a <__fp_nan>:
 c6a:	9f ef       	ldi	r25, 0xFF	; 255
 c6c:	80 ec       	ldi	r24, 0xC0	; 192
 c6e:	08 95       	ret

00000c70 <__fp_pscA>:
 c70:	00 24       	eor	r0, r0
 c72:	0a 94       	dec	r0
 c74:	16 16       	cp	r1, r22
 c76:	17 06       	cpc	r1, r23
 c78:	18 06       	cpc	r1, r24
 c7a:	09 06       	cpc	r0, r25
 c7c:	08 95       	ret

00000c7e <__fp_pscB>:
 c7e:	00 24       	eor	r0, r0
 c80:	0a 94       	dec	r0
 c82:	12 16       	cp	r1, r18
 c84:	13 06       	cpc	r1, r19
 c86:	14 06       	cpc	r1, r20
 c88:	05 06       	cpc	r0, r21
 c8a:	08 95       	ret

00000c8c <__fp_round>:
 c8c:	09 2e       	mov	r0, r25
 c8e:	03 94       	inc	r0
 c90:	00 0c       	add	r0, r0
 c92:	11 f4       	brne	.+4      	; 0xc98 <__fp_round+0xc>
 c94:	88 23       	and	r24, r24
 c96:	52 f0       	brmi	.+20     	; 0xcac <__fp_round+0x20>
 c98:	bb 0f       	add	r27, r27
 c9a:	40 f4       	brcc	.+16     	; 0xcac <__fp_round+0x20>
 c9c:	bf 2b       	or	r27, r31
 c9e:	11 f4       	brne	.+4      	; 0xca4 <__fp_round+0x18>
 ca0:	60 ff       	sbrs	r22, 0
 ca2:	04 c0       	rjmp	.+8      	; 0xcac <__fp_round+0x20>
 ca4:	6f 5f       	subi	r22, 0xFF	; 255
 ca6:	7f 4f       	sbci	r23, 0xFF	; 255
 ca8:	8f 4f       	sbci	r24, 0xFF	; 255
 caa:	9f 4f       	sbci	r25, 0xFF	; 255
 cac:	08 95       	ret

00000cae <__fp_split3>:
 cae:	57 fd       	sbrc	r21, 7
 cb0:	90 58       	subi	r25, 0x80	; 128
 cb2:	44 0f       	add	r20, r20
 cb4:	55 1f       	adc	r21, r21
 cb6:	59 f0       	breq	.+22     	; 0xcce <__fp_splitA+0x10>
 cb8:	5f 3f       	cpi	r21, 0xFF	; 255
 cba:	71 f0       	breq	.+28     	; 0xcd8 <__fp_splitA+0x1a>
 cbc:	47 95       	ror	r20

00000cbe <__fp_splitA>:
 cbe:	88 0f       	add	r24, r24
 cc0:	97 fb       	bst	r25, 7
 cc2:	99 1f       	adc	r25, r25
 cc4:	61 f0       	breq	.+24     	; 0xcde <__fp_splitA+0x20>
 cc6:	9f 3f       	cpi	r25, 0xFF	; 255
 cc8:	79 f0       	breq	.+30     	; 0xce8 <__fp_splitA+0x2a>
 cca:	87 95       	ror	r24
 ccc:	08 95       	ret
 cce:	12 16       	cp	r1, r18
 cd0:	13 06       	cpc	r1, r19
 cd2:	14 06       	cpc	r1, r20
 cd4:	55 1f       	adc	r21, r21
 cd6:	f2 cf       	rjmp	.-28     	; 0xcbc <__fp_split3+0xe>
 cd8:	46 95       	lsr	r20
 cda:	f1 df       	rcall	.-30     	; 0xcbe <__fp_splitA>
 cdc:	08 c0       	rjmp	.+16     	; 0xcee <__fp_splitA+0x30>
 cde:	16 16       	cp	r1, r22
 ce0:	17 06       	cpc	r1, r23
 ce2:	18 06       	cpc	r1, r24
 ce4:	99 1f       	adc	r25, r25
 ce6:	f1 cf       	rjmp	.-30     	; 0xcca <__fp_splitA+0xc>
 ce8:	86 95       	lsr	r24
 cea:	71 05       	cpc	r23, r1
 cec:	61 05       	cpc	r22, r1
 cee:	08 94       	sec
 cf0:	08 95       	ret

00000cf2 <__fp_trunc>:
 cf2:	0e 94 5f 06 	call	0xcbe	; 0xcbe <__fp_splitA>
 cf6:	a0 f0       	brcs	.+40     	; 0xd20 <__fp_trunc+0x2e>
 cf8:	be e7       	ldi	r27, 0x7E	; 126
 cfa:	b9 17       	cp	r27, r25
 cfc:	88 f4       	brcc	.+34     	; 0xd20 <__fp_trunc+0x2e>
 cfe:	bb 27       	eor	r27, r27
 d00:	9f 38       	cpi	r25, 0x8F	; 143
 d02:	60 f4       	brcc	.+24     	; 0xd1c <__fp_trunc+0x2a>
 d04:	16 16       	cp	r1, r22
 d06:	b1 1d       	adc	r27, r1
 d08:	67 2f       	mov	r22, r23
 d0a:	78 2f       	mov	r23, r24
 d0c:	88 27       	eor	r24, r24
 d0e:	98 5f       	subi	r25, 0xF8	; 248
 d10:	f7 cf       	rjmp	.-18     	; 0xd00 <__fp_trunc+0xe>
 d12:	86 95       	lsr	r24
 d14:	77 95       	ror	r23
 d16:	67 95       	ror	r22
 d18:	b1 1d       	adc	r27, r1
 d1a:	93 95       	inc	r25
 d1c:	96 39       	cpi	r25, 0x96	; 150
 d1e:	c8 f3       	brcs	.-14     	; 0xd12 <__fp_trunc+0x20>
 d20:	08 95       	ret

00000d22 <__fp_zero>:
 d22:	e8 94       	clt

00000d24 <__fp_szero>:
 d24:	bb 27       	eor	r27, r27
 d26:	66 27       	eor	r22, r22
 d28:	77 27       	eor	r23, r23
 d2a:	cb 01       	movw	r24, r22
 d2c:	97 f9       	bld	r25, 7
 d2e:	08 95       	ret

00000d30 <_exit>:
 d30:	f8 94       	cli

00000d32 <__stop_program>:
 d32:	ff cf       	rjmp	.-2      	; 0xd32 <__stop_program>
